/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  GuildConfigComponent,
  GuildConfigComponentInterface,
} from "../GuildConfigComponent";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "world",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "BareComponent__NotImplemented",
    type: "error",
  },
  {
    inputs: [],
    name: "OwnableWritable__NotWriter",
    type: "error",
  },
  {
    inputs: [],
    name: "Ownable__NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "Ownable__NotTransitiveOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "writer",
        type: "address",
      },
    ],
    name: "authorizeWriter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntities",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "getEntitiesWithValue",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "entity",
        type: "uint256",
      },
    ],
    name: "getRawValue",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSchema",
    outputs: [
      {
        internalType: "string[]",
        name: "keys",
        type: "string[]",
      },
      {
        internalType: "enum LibTypes.SchemaValue[]",
        name: "values",
        type: "uint8[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getValue",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "createCost",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "initTaxRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "basicCountLimit",
            type: "uint32",
          },
          {
            internalType: "string",
            name: "initNameForLevel0",
            type: "string",
          },
          {
            internalType: "string",
            name: "initNameForLevel1",
            type: "string",
          },
          {
            internalType: "string",
            name: "initNameForLevel2",
            type: "string",
          },
          {
            internalType: "string",
            name: "initNameForLevel3",
            type: "string",
          },
          {
            internalType: "string",
            name: "initNameForLevel4",
            type: "string",
          },
          {
            internalType: "uint32",
            name: "basicAreaFactor",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "basicValueFactor",
            type: "uint32",
          },
          {
            internalType: "uint64",
            name: "basicRangeFactor",
            type: "uint64",
          },
        ],
        internalType: "struct GuildConfig",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "entity",
        type: "uint256",
      },
    ],
    name: "has",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "registerIndexer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_world",
        type: "address",
      },
    ],
    name: "registerWorld",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "entity",
        type: "uint256",
      },
    ],
    name: "remove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "createCost",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "initTaxRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "basicCountLimit",
            type: "uint32",
          },
          {
            internalType: "string",
            name: "initNameForLevel0",
            type: "string",
          },
          {
            internalType: "string",
            name: "initNameForLevel1",
            type: "string",
          },
          {
            internalType: "string",
            name: "initNameForLevel2",
            type: "string",
          },
          {
            internalType: "string",
            name: "initNameForLevel3",
            type: "string",
          },
          {
            internalType: "string",
            name: "initNameForLevel4",
            type: "string",
          },
          {
            internalType: "uint32",
            name: "basicAreaFactor",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "basicValueFactor",
            type: "uint32",
          },
          {
            internalType: "uint64",
            name: "basicRangeFactor",
            type: "uint64",
          },
        ],
        internalType: "struct GuildConfig",
        name: "guildConfig",
        type: "tuple",
      },
    ],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "entity",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "writer",
        type: "address",
      },
    ],
    name: "unauthorizeWriter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "world",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "writeAccess",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200205b3803806200205b833981016040819052620000349162000200565b807ff899011875ecdd0cff874cbbf66c1a2682791e10ae993d0a0ef3d2530849a7de62000061336200008a565b60028190556001600160a01b0382161562000081576200008182620000fe565b50505062000232565b6000620000a1620001b660201b620011291760201c565b80546040519192506001600160a01b03808516929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380546001600160a01b0319166001600160a01b0392909216919091179055565b62000108620001da565b6001600160a01b0316336001600160a01b0316146200013a57604051632f7a8ee160e01b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b038316908117909155600254604051630f30347760e41b8152306004820152602481019190915263f303477090604401600060405180830381600087803b1580156200019a57600080fd5b505af1158015620001af573d6000803e3d6000fd5b5050505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6000620001f1620001b660201b620011291760201c565b546001600160a01b0316919050565b6000602082840312156200021357600080fd5b81516001600160a01b03811681146200022b57600080fd5b9392505050565b611e1980620002426000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80638b282947116100b2578063b361be4611610081578063bf4fe57e11610066578063bf4fe57e146102b2578063cccf7a8e146102c5578063f2fde38b146102d857600080fd5b8063b361be461461027f578063b8bc073d1461029257600080fd5b80638b2829471461023a5780638da5cb5b1461024d5780639d2c76b414610255578063af640d0f1461026857600080fd5b80634fef6a38116101095780636b122fe0116100ee5780636b122fe0146101ee57806375c0669c14610204578063861eb9051461021757600080fd5b80634fef6a38146101c857806355009770146101db57600080fd5b8063209652551461013b57806330b67baa1461015957806331b933b91461019e5780634cc82215146101b3575b600080fd5b6101436102eb565b604051610150919061146a565b60405180910390f35b6000546101799073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610150565b6101a66103e3565b60405161015091906115a3565b6101c66101c13660046115e7565b610417565b005b6101c66101d6366004611600565b610462565b6101c66101e93660046117c4565b610540565b6101f66105ae565b60405161015092919061195b565b6101c6610212366004611600565b610c99565b61022a610225366004611600565b610ccb565b6040519015158152602001610150565b6101c6610248366004611a4b565b610d56565b610179610da3565b6101c6610263366004611600565b610de8565b61027160025481565b604051908152602001610150565b6101a661028d366004611a92565b6103e3565b6102a56102a03660046115e7565b610f11565b6040516101509190611acf565b6101c66102c0366004611600565b610fb3565b61022a6102d33660046115e7565b61108e565b6101c66102e6366004611600565b6110b0565b604080516101608101825260008082526020820181905291810182905260608082018190526080820181905260a0820181905260c0820181905260e0820152610100810182905261012081018290526101408101829052908080808080808080808061035861060d610f11565b80602001905181019061036b9190611b3d565b60408051610160810182529b8c5263ffffffff9a8b1660208d0152988a16988b019890985260608a0196909652608089019490945260a088019290925260c087015260e0860152831661010085015290911661012083015267ffffffffffffffff166101408201529c9b505050505050505050505050565b60606040517f17d5b8e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61042033610ccb565b610456576040517f406ed3da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61045f8161114d565b50565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff1633146104d2576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff1660009081527f8ffeadc5cba727b8cc3cdef48739619490ea317fdb3baae1259089d06f92c9096020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b61045f61060d826000015183602001518460400151856060015186608001518760a001518860c001518960e001518a61010001518b61012001518c610140015160405160200161059a9b9a99989796959493929190611c89565b604051602081830303815290604052610d56565b60408051600b8082526101808201909252606091829190816020015b60608152602001906001900390816105ca57505060408051600b808252610180820190925291935060208201610160803683370190505090506040518060400160405280600a81526020017f637265617465436f7374000000000000000000000000000000000000000000008152508260008151811061064c5761064c611d48565b6020026020010181905250600d8160008151811061066c5761066c611d48565b602002602001019060218111156106855761068561192c565b908160218111156106985761069861192c565b815250506040518060400160405280600b81526020017f696e697454617852617465000000000000000000000000000000000000000000815250826001815181106106e5576106e5611d48565b6020026020010181905250600a8160018151811061070557610705611d48565b6020026020010190602181111561071e5761071e61192c565b908160218111156107315761073161192c565b815250506040518060400160405280600f81526020017f6261736963436f756e744c696d697400000000000000000000000000000000008152508260028151811061077e5761077e611d48565b6020026020010181905250600a8160028151811061079e5761079e611d48565b602002602001019060218111156107b7576107b761192c565b908160218111156107ca576107ca61192c565b815250506040518060400160405280601181526020017f696e69744e616d65466f724c6576656c300000000000000000000000000000008152508260038151811061081757610817611d48565b6020026020010181905250600f8160038151811061083757610837611d48565b602002602001019060218111156108505761085061192c565b908160218111156108635761086361192c565b815250506040518060400160405280601181526020017f696e69744e616d65466f724c6576656c31000000000000000000000000000000815250826004815181106108b0576108b0611d48565b6020026020010181905250600f816004815181106108d0576108d0611d48565b602002602001019060218111156108e9576108e961192c565b908160218111156108fc576108fc61192c565b815250506040518060400160405280601181526020017f696e69744e616d65466f724c6576656c320000000000000000000000000000008152508260058151811061094957610949611d48565b6020026020010181905250600f8160058151811061096957610969611d48565b602002602001019060218111156109825761098261192c565b908160218111156109955761099561192c565b815250506040518060400160405280601181526020017f696e69744e616d65466f724c6576656c33000000000000000000000000000000815250826006815181106109e2576109e2611d48565b6020026020010181905250600f81600681518110610a0257610a02611d48565b60200260200101906021811115610a1b57610a1b61192c565b90816021811115610a2e57610a2e61192c565b815250506040518060400160405280601181526020017f696e69744e616d65466f724c6576656c3400000000000000000000000000000081525082600781518110610a7b57610a7b611d48565b6020026020010181905250600f81600781518110610a9b57610a9b611d48565b60200260200101906021811115610ab457610ab461192c565b90816021811115610ac757610ac761192c565b815250506040518060400160405280600f81526020017f626173696341726561466163746f72000000000000000000000000000000000081525082600881518110610b1457610b14611d48565b6020026020010181905250600a81600881518110610b3457610b34611d48565b60200260200101906021811115610b4d57610b4d61192c565b90816021811115610b6057610b6061192c565b815250506040518060400160405280601081526020017f626173696356616c7565466163746f720000000000000000000000000000000081525082600981518110610bad57610bad611d48565b6020026020010181905250600a81600981518110610bcd57610bcd611d48565b60200260200101906021811115610be657610be661192c565b90816021811115610bf957610bf961192c565b815250506040518060400160405280601081526020017f626173696352616e6765466163746f720000000000000000000000000000000081525082600a81518110610c4657610c46611d48565b6020026020010181905250600b81600a81518110610c6657610c66611d48565b60200260200101906021811115610c7f57610c7f61192c565b90816021811115610c9257610c9261192c565b9052509091565b6040517f17d5b8e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081527f8ffeadc5cba727b8cc3cdef48739619490ea317fdb3baae1259089d06f92c909602052604081205460ff1680610d505750610d21610da3565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b92915050565b610d5f33610ccb565b610d95576040517f406ed3da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d9f82826111bb565b5050565b6000610de37f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff163314610e58576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556002546040517ff3034770000000000000000000000000000000000000000000000000000000008152306004820152602481019190915263f3034770906044015b600060405180830381600087803b158015610ef657600080fd5b505af1158015610f0a573d6000803e3d6000fd5b5050505050565b6000818152600160205260409020805460609190610f2e90611d77565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5a90611d77565b8015610fa75780601f10610f7c57610100808354040283529160200191610fa7565b820191906000526020600020905b815481529060010190602001808311610f8a57829003601f168201915b50505050509050919050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff163314611023576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff1660009081527f8ffeadc5cba727b8cc3cdef48739619490ea317fdb3baae1259089d06f92c9096020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b600081815260016020526040812080546110a790611d77565b15159392505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff163314611120576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61045f81611269565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b60008181526001602052604081206111649161131d565b6000546040517f0de3b7b50000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff90911690630de3b7b590602401610edc565b600082815260016020908152604090912082516111da92840190611357565b506000546040517fcfd3c57f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063cfd3c57f906112339085908590600401611dca565b600060405180830381600087803b15801561124d57600080fd5b505af1158015611261573d6000803e3d6000fd5b505050505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f671680460805460405161045f928492909173ffffffffffffffffffffffffffffffffffffffff8085169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b50805461132990611d77565b6000825580601f10611339575050565b601f01602090049060005260206000209081019061045f91906113db565b82805461136390611d77565b90600052602060002090601f01602090048101928261138557600085556113cb565b82601f1061139e57805160ff19168380011785556113cb565b828001600101855582156113cb579182015b828111156113cb5782518255916020019190600101906113b0565b506113d79291506113db565b5090565b5b808211156113d757600081556001016113dc565b60005b8381101561140b5781810151838201526020016113f3565b8381111561141a576000848401525b50505050565b600081518084526114388160208601602086016113f0565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152815160208201526000602083015161148e604084018263ffffffff169052565b50604083015163ffffffff811660608401525060608301516101608060808501526114bd610180850183611420565b915060808501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0808685030160a08701526114f98483611420565b935060a08701519150808685030160c08701526115168483611420565b935060c08701519150808685030160e08701526115338483611420565b935060e087015191506101008187860301818801526115528584611420565b945080880151925050506101206115708187018363ffffffff169052565b86015190506101406115898682018363ffffffff169052565b9095015167ffffffffffffffff1693019290925250919050565b6020808252825182820181905260009190848201906040850190845b818110156115db578351835292840192918401916001016115bf565b50909695505050505050565b6000602082840312156115f957600080fd5b5035919050565b60006020828403121561161257600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461163657600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610160810167ffffffffffffffff811182821017156116905761169061163d565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156116dd576116dd61163d565b604052919050565b63ffffffff8116811461045f57600080fd5b8035611702816116e5565b919050565b600067ffffffffffffffff8211156117215761172161163d565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261175e57600080fd5b813561177161176c82611707565b611696565b81815284602083860101111561178657600080fd5b816020850160208301376000918101602001919091529392505050565b67ffffffffffffffff8116811461045f57600080fd5b8035611702816117a3565b6000602082840312156117d657600080fd5b813567ffffffffffffffff808211156117ee57600080fd5b90830190610160828603121561180357600080fd5b61180b61166c565b8235815261181b602084016116f7565b602082015261182c604084016116f7565b604082015260608301358281111561184357600080fd5b61184f8782860161174d565b60608301525060808301358281111561186757600080fd5b6118738782860161174d565b60808301525060a08301358281111561188b57600080fd5b6118978782860161174d565b60a08301525060c0830135828111156118af57600080fd5b6118bb8782860161174d565b60c08301525060e0830135828111156118d357600080fd5b6118df8782860161174d565b60e08301525061010091506118f58284016116f7565b8282015261012091506119098284016116f7565b82820152610140915061191d8284016117b9565b91810191909152949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b838110156119d0577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08887030185526119be868351611420565b95509382019390820190600101611984565b50508584038187015286518085528782019482019350915060005b82811015611a3e57845160228110611a2c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b845293810193928101926001016119eb565b5091979650505050505050565b60008060408385031215611a5e57600080fd5b82359150602083013567ffffffffffffffff811115611a7c57600080fd5b611a888582860161174d565b9150509250929050565b600060208284031215611aa457600080fd5b813567ffffffffffffffff811115611abb57600080fd5b611ac78482850161174d565b949350505050565b6020815260006116366020830184611420565b8051611702816116e5565b600082601f830112611afe57600080fd5b8151611b0c61176c82611707565b818152846020838601011115611b2157600080fd5b611ac78260208301602087016113f0565b8051611702816117a3565b60008060008060008060008060008060006101608c8e031215611b5f57600080fd5b8b519a50611b6f60208d01611ae2565b9950611b7d60408d01611ae2565b985060608c015167ffffffffffffffff811115611b9957600080fd5b611ba58e828f01611aed565b98505060808c015167ffffffffffffffff811115611bc257600080fd5b611bce8e828f01611aed565b97505060a08c015167ffffffffffffffff811115611beb57600080fd5b611bf78e828f01611aed565b96505060c08c015167ffffffffffffffff811115611c1457600080fd5b611c208e828f01611aed565b95505060e08c015167ffffffffffffffff811115611c3d57600080fd5b611c498e828f01611aed565b945050611c596101008d01611ae2565b9250611c686101208d01611ae2565b9150611c776101408d01611b32565b90509295989b509295989b9093969950565b60006101608d835263ffffffff808e166020850152808d166040850152816060850152611cb88285018d611420565b91508382036080850152611ccc828c611420565b915083820360a0850152611ce0828b611420565b915083820360c0850152611cf4828a611420565b915083820360e0850152611d088289611420565b90871661010085015263ffffffff86166101208501529150611d279050565b67ffffffffffffffff83166101408301529c9b505050505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c90821680611d8b57607f821691505b602082108103611dc4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b828152604060208201526000611ac7604083018461142056fea264697066735822122022e89405124706f67ea3578c1f3c1d01d8c67680ea4bf16ace990e80b568eb5e64736f6c634300080d0033";

type GuildConfigComponentConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GuildConfigComponentConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GuildConfigComponent__factory extends ContractFactory {
  constructor(...args: GuildConfigComponentConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    world: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GuildConfigComponent> {
    return super.deploy(
      world,
      overrides || {}
    ) as Promise<GuildConfigComponent>;
  }
  override getDeployTransaction(
    world: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(world, overrides || {});
  }
  override attach(address: string): GuildConfigComponent {
    return super.attach(address) as GuildConfigComponent;
  }
  override connect(signer: Signer): GuildConfigComponent__factory {
    return super.connect(signer) as GuildConfigComponent__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GuildConfigComponentInterface {
    return new utils.Interface(_abi) as GuildConfigComponentInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GuildConfigComponent {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as GuildConfigComponent;
  }
}
