/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  ZKConfigComponent,
  ZKConfigComponentInterface,
} from "../ZKConfigComponent";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "world",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "BareComponent__NotImplemented",
    type: "error",
  },
  {
    inputs: [],
    name: "OwnableWritable__NotWriter",
    type: "error",
  },
  {
    inputs: [],
    name: "Ownable__NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "Ownable__NotTransitiveOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "writer",
        type: "address",
      },
    ],
    name: "authorizeWriter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntities",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "getEntitiesWithValue",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "entity",
        type: "uint256",
      },
    ],
    name: "getRawValue",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSchema",
    outputs: [
      {
        internalType: "string[]",
        name: "keys",
        type: "string[]",
      },
      {
        internalType: "enum LibTypes.SchemaValue[]",
        name: "values",
        type: "uint8[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getValue",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "open",
            type: "bool",
          },
          {
            internalType: "address",
            name: "initVerifyAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "moveVerifyAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "markVerifyAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "treasureVerifyAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "resourceVerifyAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "attackPathVerifyAddress",
            type: "address",
          },
        ],
        internalType: "struct ZKConfig",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "entity",
        type: "uint256",
      },
    ],
    name: "has",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "registerIndexer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_world",
        type: "address",
      },
    ],
    name: "registerWorld",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "entity",
        type: "uint256",
      },
    ],
    name: "remove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "open",
            type: "bool",
          },
          {
            internalType: "address",
            name: "initVerifyAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "moveVerifyAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "markVerifyAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "treasureVerifyAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "resourceVerifyAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "attackPathVerifyAddress",
            type: "address",
          },
        ],
        internalType: "struct ZKConfig",
        name: "moveConfig",
        type: "tuple",
      },
    ],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "entity",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "writer",
        type: "address",
      },
    ],
    name: "unauthorizeWriter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "world",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "writeAccess",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001a0c38038062001a0c833981016040819052620000349162000200565b807fd0deb8af54f5692432398f7f62bf53c9e54e6d6a9b4dbccb012b3fe04ea432d362000061336200008a565b60028190556001600160a01b0382161562000081576200008182620000fe565b50505062000232565b6000620000a1620001b660201b62000f221760201c565b80546040519192506001600160a01b03808516929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380546001600160a01b0319166001600160a01b0392909216919091179055565b62000108620001da565b6001600160a01b0316336001600160a01b0316146200013a57604051632f7a8ee160e01b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b038316908117909155600254604051630f30347760e41b8152306004820152602481019190915263f303477090604401600060405180830381600087803b1580156200019a57600080fd5b505af1158015620001af573d6000803e3d6000fd5b5050505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6000620001f1620001b660201b62000f221760201c565b546001600160a01b0316919050565b6000602082840312156200021357600080fd5b81516001600160a01b03811681146200022b57600080fd5b9392505050565b6117ca80620002426000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80638b282947116100b2578063b361be4611610081578063bf4fe57e11610066578063bf4fe57e14610321578063cccf7a8e14610334578063f2fde38b1461034757600080fd5b8063b361be46146102ee578063b8bc073d1461030157600080fd5b80638b282947146102a95780638da5cb5b146102bc5780639d2c76b4146102c4578063af640d0f146102d757600080fd5b80634cc82215116101095780636b122fe0116100ee5780636b122fe01461025d57806375c0669c14610273578063861eb9051461028657600080fd5b80634cc82215146102375780634fef6a381461024a57600080fd5b80631aaf228e1461013b578063209652551461015057806330b67baa146101dd57806331b933b914610222575b600080fd5b61014e610149366004611258565b61035a565b005b6101586103f7565b6040516101d49190600060e082019050825115158252602083015173ffffffffffffffffffffffffffffffffffffffff80821660208501528060408601511660408501528060608601511660608501528060808601511660808501528060a08601511660a08501528060c08601511660c0850152505092915050565b60405180910390f35b6000546101fd9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d4565b61022a6104b2565b6040516101d49190611310565b61014e610245366004611354565b6104e6565b61014e61025836600461136d565b61052e565b61026561060c565b6040516101d492919061142b565b61014e61028136600461136d565b610a92565b61029961029436600461136d565b610ac4565b60405190151581526020016101d4565b61014e6102b73660046115c6565b610b4f565b6101fd610b9c565b61014e6102d236600461136d565b610be1565b6102e060025481565b6040519081526020016101d4565b61022a6102fc36600461160d565b6104b2565b61031461030f366004611354565b610d0a565b6040516101d4919061164a565b61014e61032f36600461136d565b610dac565b610299610342366004611354565b610e87565b61014e61035536600461136d565b610ea9565b6103f461060d826000015183602001518460400151856060015186608001518760a001518860c001516040516020016103e09796959493929190961515875273ffffffffffffffffffffffffffffffffffffffff95861660208801529385166040870152918416606086015283166080850152821660a08401521660c082015260e00190565b604051602081830303815290604052610b4f565b50565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081018290529080808080808061044161060d610d0a565b806020019051810190610454919061165d565b6040805160e081018252971515885273ffffffffffffffffffffffffffffffffffffffff968716602089015294861694870194909452918416606086015283166080850152821660a08401521660c082015298975050505050505050565b60606040517f17d5b8e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104ef33610ac4565b610525576040517f406ed3da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103f481610f46565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff16331461059e576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff1660009081527f8ffeadc5cba727b8cc3cdef48739619490ea317fdb3baae1259089d06f92c9096020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b6040805160078082526101008201909252606091829190816020015b606081526020019060019003908161062857505060408051600780825261010082019092529193506020820160e0803683370190505090506040518060400160405280600481526020017f6f70656e00000000000000000000000000000000000000000000000000000000815250826000815181106106a9576106a96116f9565b60200260200101819052506000816000815181106106c9576106c96116f9565b602002602001019060218111156106e2576106e26113fc565b908160218111156106f5576106f56113fc565b815250506040518060400160405280601181526020017f696e69745665726966794164647265737300000000000000000000000000000081525082600181518110610742576107426116f9565b6020026020010181905250601081600181518110610762576107626116f9565b6020026020010190602181111561077b5761077b6113fc565b9081602181111561078e5761078e6113fc565b815250506040518060400160405280601181526020017f6d6f766556657269667941646472657373000000000000000000000000000000815250826002815181106107db576107db6116f9565b60200260200101819052506010816002815181106107fb576107fb6116f9565b60200260200101906021811115610814576108146113fc565b90816021811115610827576108276113fc565b815250506040518060400160405280601181526020017f6d61726b5665726966794164647265737300000000000000000000000000000081525082600381518110610874576108746116f9565b6020026020010181905250601081600381518110610894576108946116f9565b602002602001019060218111156108ad576108ad6113fc565b908160218111156108c0576108c06113fc565b815250506040518060400160405280601581526020017f74726561737572655665726966794164647265737300000000000000000000008152508260048151811061090d5761090d6116f9565b602002602001018190525060108160048151811061092d5761092d6116f9565b60200260200101906021811115610946576109466113fc565b90816021811115610959576109596113fc565b815250506040518060400160405280601581526020017f7265736f75726365566572696679416464726573730000000000000000000000815250826005815181106109a6576109a66116f9565b60200260200101819052506010816005815181106109c6576109c66116f9565b602002602001019060218111156109df576109df6113fc565b908160218111156109f2576109f26113fc565b815250506040518060400160405280601781526020017f61747461636b506174685665726966794164647265737300000000000000000081525082600681518110610a3f57610a3f6116f9565b6020026020010181905250601081600681518110610a5f57610a5f6116f9565b60200260200101906021811115610a7857610a786113fc565b90816021811115610a8b57610a8b6113fc565b9052509091565b6040517f17d5b8e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081527f8ffeadc5cba727b8cc3cdef48739619490ea317fdb3baae1259089d06f92c909602052604081205460ff1680610b495750610b1a610b9c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b92915050565b610b5833610ac4565b610b8e576040517f406ed3da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b988282610fb4565b5050565b6000610bdc7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff163314610c51576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556002546040517ff3034770000000000000000000000000000000000000000000000000000000008152306004820152602481019190915263f3034770906044015b600060405180830381600087803b158015610cef57600080fd5b505af1158015610d03573d6000803e3d6000fd5b5050505050565b6000818152600160205260409020805460609190610d2790611728565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5390611728565b8015610da05780601f10610d7557610100808354040283529160200191610da0565b820191906000526020600020905b815481529060010190602001808311610d8357829003601f168201915b50505050509050919050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff163314610e1c576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff1660009081527f8ffeadc5cba727b8cc3cdef48739619490ea317fdb3baae1259089d06f92c9096020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b60008181526001602052604081208054610ea090611728565b15159392505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff163314610f19576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103f481611062565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6000818152600160205260408120610f5d91611116565b6000546040517f0de3b7b50000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff90911690630de3b7b590602401610cd5565b60008281526001602090815260409091208251610fd392840190611150565b506000546040517fcfd3c57f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063cfd3c57f9061102c908590859060040161177b565b600060405180830381600087803b15801561104657600080fd5b505af115801561105a573d6000803e3d6000fd5b505050505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046080546040516103f4928492909173ffffffffffffffffffffffffffffffffffffffff8085169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b50805461112290611728565b6000825580601f10611132575050565b601f0160209004906000526020600020908101906103f491906111d4565b82805461115c90611728565b90600052602060002090601f01602090048101928261117e57600085556111c4565b82601f1061119757805160ff19168380011785556111c4565b828001600101855582156111c4579182015b828111156111c45782518255916020019190600101906111a9565b506111d09291506111d4565b5090565b5b808211156111d057600081556001016111d5565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b80151581146103f457600080fd5b73ffffffffffffffffffffffffffffffffffffffff811681146103f457600080fd5b803561125381611226565b919050565b600060e0828403121561126a57600080fd5b60405160e0810181811067ffffffffffffffff8211171561128d5761128d6111e9565b604052823561129b81611218565b815260208301356112ab81611226565b602082015260408301356112be81611226565b604082015260608301356112d181611226565b60608201526112e260808401611248565b60808201526112f360a08401611248565b60a082015261130460c08401611248565b60c08201529392505050565b6020808252825182820181905260009190848201906040850190845b818110156113485783518352928401929184019160010161132c565b50909695505050505050565b60006020828403121561136657600080fd5b5035919050565b60006020828403121561137f57600080fd5b813561138a81611226565b9392505050565b6000815180845260005b818110156113b75760208185018101518683018201520161139b565b818111156113c9576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b838110156114a0577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa088870301855261148e868351611391565b95509382019390820190600101611454565b50508584038187015286518085528782019482019350915060005b8281101561150e578451602281106114fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b845293810193928101926001016114bb565b5091979650505050505050565b600082601f83011261152c57600080fd5b813567ffffffffffffffff80821115611547576115476111e9565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561158d5761158d6111e9565b816040528381528660208588010111156115a657600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156115d957600080fd5b82359150602083013567ffffffffffffffff8111156115f757600080fd5b6116038582860161151b565b9150509250929050565b60006020828403121561161f57600080fd5b813567ffffffffffffffff81111561163657600080fd5b6116428482850161151b565b949350505050565b60208152600061138a6020830184611391565b600080600080600080600060e0888a03121561167857600080fd5b875161168381611218565b602089015190975061169481611226565b60408901519096506116a581611226565b60608901519095506116b681611226565b60808901519094506116c781611226565b60a08901519093506116d881611226565b60c08901519092506116e981611226565b8091505092959891949750929550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c9082168061173c57607f821691505b602082108103611775577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b828152604060208201526000611642604083018461139156fea26469706673582212207bc9b5543f315f19e907a5ca175667ed29a1d48f64c4f5e35986e07d2b8eceba64736f6c634300080d0033";

type ZKConfigComponentConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ZKConfigComponentConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ZKConfigComponent__factory extends ContractFactory {
  constructor(...args: ZKConfigComponentConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    world: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ZKConfigComponent> {
    return super.deploy(world, overrides || {}) as Promise<ZKConfigComponent>;
  }
  override getDeployTransaction(
    world: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(world, overrides || {});
  }
  override attach(address: string): ZKConfigComponent {
    return super.attach(address) as ZKConfigComponent;
  }
  override connect(signer: Signer): ZKConfigComponent__factory {
    return super.connect(signer) as ZKConfigComponent__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZKConfigComponentInterface {
    return new utils.Interface(_abi) as ZKConfigComponentInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ZKConfigComponent {
    return new Contract(address, _abi, signerOrProvider) as ZKConfigComponent;
  }
}
