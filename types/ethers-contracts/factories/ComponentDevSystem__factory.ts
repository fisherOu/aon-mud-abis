/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  ComponentDevSystem,
  ComponentDevSystemInterface,
} from "../ComponentDevSystem";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWorld",
        name: "_world",
        type: "address",
      },
      {
        internalType: "address",
        name: "_components",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Ownable__NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "Ownable__NotTransitiveOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "params",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "componentId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "entity",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "executeTyped",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "requirement",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000ef938038062000ef983398101604081905262000034916200022c565b818162000041336200010f565b6001600160a01b03811615620000585780620000bd565b816001600160a01b031663ba62fbe46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000097573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000bd91906200026b565b600080546001600160a01b03199081166001600160a01b0393841690811790925560018054909116928516928317905562000105919062000183602090811b620004f217901c565b5050505062000292565b600062000126620001ef60201b620005831760201c565b80546040519192506001600160a01b03808516929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380546001600160a01b0319166001600160a01b0392909216919091179055565b7ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a8780546001600160a01b039384166001600160a01b0319918216179091557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a868054929093169116179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6001600160a01b03811681146200022957600080fd5b50565b600080604083850312156200024057600080fd5b82516200024d8162000213565b6020840151909250620002608162000213565b809150509250929050565b6000602082840312156200027e57600080fd5b81516200028b8162000213565b9392505050565b610c5780620002a26000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80638b246a5b116100505780638b246a5b146100a85780638da5cb5b146100bc578063f2fde38b146100e957600080fd5b806309c5eabe1461006c57806334830fd714610095575b600080fd5b61007f61007a3660046108b9565b6100fe565b60405161008c9190610968565b60405180910390f35b61007f6100a3366004610982565b6103fb565b61007f6100b63660046108b9565b50606090565b6100c4610431565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008c565b6100fc6100f73660046109f4565b610476565b005b6001546040517f4f27da180000000000000000000000000000000000000000000000000000000081527f04cdab6fd9d9bc2fa036f31a2cdf8d756e6e674d18202703a6e084cd0766bd4d600482015260609160009173ffffffffffffffffffffffffffffffffffffffff90911690634f27da1890602401602060405180830381865afa158015610192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b69190610a11565b73ffffffffffffffffffffffffffffffffffffffff1663209652556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610200573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102249190610a2e565b8051909150610294576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6e6f7420696e20646576206d6f6465000000000000000000000000000000000060448201526064015b60405180910390fd5b6000806000858060200190518101906102ad9190610a7f565b600080549396509194509250906102da9073ffffffffffffffffffffffffffffffffffffffff16856105a7565b9050815160000361036a576040517f4cc822150000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff821690634cc8221590602401600060405180830381600087803b15801561034d57600080fd5b505af1158015610361573d6000803e3d6000fd5b505050506103f1565b6040517f8b28294700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690638b282947906103be9086908690600401610b0b565b600060405180830381600087803b1580156103d857600080fd5b505af11580156103ec573d6000803e3d6000fd5b505050505b5050505050919050565b606061042984848460405160200161041593929190610b24565b6040516020818303038152906040526100fe565b949350505050565b60006104717f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff1633146104e6576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104ef816106eb565b50565b7ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a87805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a868054929093169116179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6040517ffbdfa1ea00000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff85169063fbdfa1ea90602401600060405180830381865afa158015610617573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261065d9190810190610b4c565b905080516000036106ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6964206e6f742072656769737465726564000000000000000000000000000000604482015260640161028b565b610429816000815181106106e0576106e0610bf2565b602002602001015190565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046080546040516104ef928492909173ffffffffffffffffffffffffffffffffffffffff8085169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156108155761081561079f565b604052919050565b600067ffffffffffffffff8211156108375761083761079f565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261087457600080fd5b81356108876108828261081d565b6107ce565b81815284602083860101111561089c57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156108cb57600080fd5b813567ffffffffffffffff8111156108e257600080fd5b61042984828501610863565b60005b838110156109095781810151838201526020016108f1565b83811115610918576000848401525b50505050565b600081518084526109368160208601602086016108ee565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061097b602083018461091e565b9392505050565b60008060006060848603121561099757600080fd5b8335925060208401359150604084013567ffffffffffffffff8111156109bc57600080fd5b6109c886828701610863565b9150509250925092565b73ffffffffffffffffffffffffffffffffffffffff811681146104ef57600080fd5b600060208284031215610a0657600080fd5b813561097b816109d2565b600060208284031215610a2357600080fd5b815161097b816109d2565b600060208284031215610a4057600080fd5b6040516020810181811067ffffffffffffffff82111715610a6357610a6361079f565b60405282518015158114610a7657600080fd5b81529392505050565b600080600060608486031215610a9457600080fd5b8351925060208401519150604084015167ffffffffffffffff811115610ab957600080fd5b8401601f81018613610aca57600080fd5b8051610ad86108828261081d565b818152876020838501011115610aed57600080fd5b610afe8260208301602086016108ee565b8093505050509250925092565b828152604060208201526000610429604083018461091e565b838152826020820152606060408201526000610b43606083018461091e565b95945050505050565b60006020808385031215610b5f57600080fd5b825167ffffffffffffffff80821115610b7757600080fd5b818501915085601f830112610b8b57600080fd5b815181811115610b9d57610b9d61079f565b8060051b9150610bae8483016107ce565b8181529183018401918481019088841115610bc857600080fd5b938501935b83851015610be657845182529385019390850190610bcd565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122064783d8a6f06849a77a26d37a928a6c371a39e40e849639a710dc2a1f3d7c74164736f6c634300080d0033";

type ComponentDevSystemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ComponentDevSystemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ComponentDevSystem__factory extends ContractFactory {
  constructor(...args: ComponentDevSystemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ComponentDevSystem> {
    return super.deploy(
      _world,
      _components,
      overrides || {}
    ) as Promise<ComponentDevSystem>;
  }
  override getDeployTransaction(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_world, _components, overrides || {});
  }
  override attach(address: string): ComponentDevSystem {
    return super.attach(address) as ComponentDevSystem;
  }
  override connect(signer: Signer): ComponentDevSystem__factory {
    return super.connect(signer) as ComponentDevSystem__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ComponentDevSystemInterface {
    return new utils.Interface(_abi) as ComponentDevSystemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ComponentDevSystem {
    return new Contract(address, _abi, signerOrProvider) as ComponentDevSystem;
  }
}
