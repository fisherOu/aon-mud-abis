/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  BulkSetStateSystem,
  BulkSetStateSystemInterface,
} from "../BulkSetStateSystem";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWorld",
        name: "_world",
        type: "address",
      },
      {
        internalType: "address",
        name: "_components",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Ownable__NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "Ownable__NotTransitiveOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "arguments",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "componentIds",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "entities",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "component",
            type: "uint8",
          },
          {
            internalType: "uint32",
            name: "entity",
            type: "uint32",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
        ],
        internalType: "struct ECSEvent[]",
        name: "state",
        type: "tuple[]",
      },
    ],
    name: "executeTyped",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "requirement",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620013283803806200132883398101604081905262000034916200022c565b818162000041336200010f565b6001600160a01b03811615620000585780620000bd565b816001600160a01b031663ba62fbe46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000097573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000bd91906200026b565b600080546001600160a01b03199081166001600160a01b0393841690811790925560018054909116928516928317905562000105919062000183602090811b620004fd17901c565b5050505062000292565b600062000126620001ef60201b6200058e1760201c565b80546040519192506001600160a01b03808516929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380546001600160a01b0319166001600160a01b0392909216919091179055565b7ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a8780546001600160a01b039384166001600160a01b0319918216179091557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a868054929093169116179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6001600160a01b03811681146200022957600080fd5b50565b600080604083850312156200024057600080fd5b82516200024d8162000213565b6020840151909250620002608162000213565b809150509250929050565b6000602082840312156200027e57600080fd5b81516200028b8162000213565b9392505050565b61108680620002a26000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80638da5cb5b116100505780638da5cb5b146100a95780639cb22c91146100d6578063f2fde38b146100e957600080fd5b806309c5eabe1461006c5780638b246a5b14610095575b600080fd5b61007f61007a3660046108ed565b6100fe565b60405161008c919061099c565b60405180910390f35b61007f6100a33660046108ed565b50606090565b6100b1610406565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008c565b61007f6100e4366004610a61565b61044b565b6100fc6100f7366004610bf2565b610481565b005b6001546040517f4f27da180000000000000000000000000000000000000000000000000000000081527f04cdab6fd9d9bc2fa036f31a2cdf8d756e6e674d18202703a6e084cd0766bd4d600482015260609160009173ffffffffffffffffffffffffffffffffffffffff90911690634f27da1890602401602060405180830381865afa158015610192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b69190610c0f565b73ffffffffffffffffffffffffffffffffffffffff1663209652556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610200573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102249190610c2c565b8051909150610294576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6e6f7420696e20646576206d6f6465000000000000000000000000000000000060448201526064015b60405180910390fd5b6000806000858060200190518101906102ad9190610cd8565b92509250925060005b81518110156103fc576000805483516103209173ffffffffffffffffffffffffffffffffffffffff169087908690869081106102f4576102f4610e6f565b60200260200101516000015160ff168151811061031357610313610e6f565b60200260200101516105b2565b90508073ffffffffffffffffffffffffffffffffffffffff16638b2829478585858151811061035157610351610e6f565b60200260200101516020015163ffffffff168151811061037357610373610e6f565b602002602001015185858151811061038d5761038d610e6f565b6020026020010151604001516040518363ffffffff1660e01b81526004016103b6929190610e9e565b600060405180830381600087803b1580156103d057600080fd5b505af11580156103e4573d6000803e3d6000fd5b505050505080806103f490610eb7565b9150506102b6565b5050505050919050565b60006104467f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b606061047984848460405160200161046593929190610f51565b6040516020818303038152906040526100fe565b949350505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff1633146104f1576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104fa816106f6565b50565b7ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a87805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a868054929093169116179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6040517ffbdfa1ea00000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff85169063fbdfa1ea90602401600060405180830381865afa158015610622573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610668919081019061101b565b905080516000036106d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6964206e6f742072656769737465726564000000000000000000000000000000604482015260640161028b565b610479816000815181106106eb576106eb610e6f565b602002602001015190565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046080546040516104fa928492909173ffffffffffffffffffffffffffffffffffffffff8085169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156107fc576107fc6107aa565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610849576108496107aa565b604052919050565b600067ffffffffffffffff82111561086b5761086b6107aa565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f8301126108a857600080fd5b81356108bb6108b682610851565b610802565b8181528460208386010111156108d057600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156108ff57600080fd5b813567ffffffffffffffff81111561091657600080fd5b61047984828501610897565b60005b8381101561093d578181015183820152602001610925565b8381111561094c576000848401525b50505050565b6000815180845261096a816020860160208601610922565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006109af6020830184610952565b9392505050565b600067ffffffffffffffff8211156109d0576109d06107aa565b5060051b60200190565b600082601f8301126109eb57600080fd5b813560206109fb6108b6836109b6565b82815260059290921b84018101918181019086841115610a1a57600080fd5b8286015b84811015610a355780358352918301918301610a1e565b509695505050505050565b60ff811681146104fa57600080fd5b63ffffffff811681146104fa57600080fd5b600080600060608486031215610a7657600080fd5b833567ffffffffffffffff80821115610a8e57600080fd5b610a9a878388016109da565b9450602091508186013581811115610ab157600080fd5b610abd888289016109da565b945050604086013581811115610ad257600080fd5b8601601f81018813610ae357600080fd5b8035610af16108b6826109b6565b81815260059190911b8201840190848101908a831115610b1057600080fd5b8584015b83811015610bbf57803586811115610b2c5760008081fd5b85016060818e037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0011215610b615760008081fd5b610b696107d9565b88820135610b7681610a40565b81526040820135610b8681610a4f565b818a0152606082013588811115610b9d5760008081fd5b610bab8f8b83860101610897565b604083015250845250918601918601610b14565b508096505050505050509250925092565b73ffffffffffffffffffffffffffffffffffffffff811681146104fa57600080fd5b600060208284031215610c0457600080fd5b81356109af81610bd0565b600060208284031215610c2157600080fd5b81516109af81610bd0565b600060208284031215610c3e57600080fd5b6040516020810181811067ffffffffffffffff82111715610c6157610c616107aa565b60405282518015158114610c7457600080fd5b81529392505050565b600082601f830112610c8e57600080fd5b81516020610c9e6108b6836109b6565b82815260059290921b84018101918181019086841115610cbd57600080fd5b8286015b84811015610a355780518352918301918301610cc1565b600080600060608486031215610ced57600080fd5b835167ffffffffffffffff80821115610d0557600080fd5b610d1187838801610c7d565b9450602091508186015181811115610d2857600080fd5b610d3488828901610c7d565b945050604086015181811115610d4957600080fd5b8601601f81018813610d5a57600080fd5b8051610d686108b6826109b6565b81815260059190911b8201840190848101908a831115610d8757600080fd5b8584015b83811015610bbf57805186811115610da257600080fd5b85016060818e037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0011215610dd657600080fd5b610dde6107d9565b88820151610deb81610a40565b81526040820151610dfb81610a4f565b818a0152606082015188811115610e1157600080fd5b8083019250508d603f830112610e2657600080fd5b88820151610e366108b682610851565b8181528f6040838601011115610e4b57600080fd5b610e5b828c830160408701610922565b604083015250845250918601918601610d8b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8281526040602082015260006104796040830184610952565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610f0f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b600081518084526020808501945080840160005b83811015610f4657815187529582019590820190600101610f2a565b509495945050505050565b60006060808352610f6481840187610f16565b602084820381860152610f778288610f16565b91506040858303818701528287518085528385019150838160051b860101848a0160005b83811015611009578783037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00185528151805160ff1684528781015163ffffffff16888501528601518684018a9052610ff68a850182610952565b9588019593505090860190600101610f9b565b50909c9b505050505050505050505050565b60006020828403121561102d57600080fd5b815167ffffffffffffffff81111561104457600080fd5b61047984828501610c7d56fea2646970667358221220d243fbee15741f600e66653997f112c5237d551efdc4974204afb42f938b845564736f6c634300080d0033";

type BulkSetStateSystemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BulkSetStateSystemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BulkSetStateSystem__factory extends ContractFactory {
  constructor(...args: BulkSetStateSystemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BulkSetStateSystem> {
    return super.deploy(
      _world,
      _components,
      overrides || {}
    ) as Promise<BulkSetStateSystem>;
  }
  override getDeployTransaction(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_world, _components, overrides || {});
  }
  override attach(address: string): BulkSetStateSystem {
    return super.attach(address) as BulkSetStateSystem;
  }
  override connect(signer: Signer): BulkSetStateSystem__factory {
    return super.connect(signer) as BulkSetStateSystem__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BulkSetStateSystemInterface {
    return new utils.Interface(_abi) as BulkSetStateSystemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BulkSetStateSystem {
    return new Contract(address, _abi, signerOrProvider) as BulkSetStateSystem;
  }
}
