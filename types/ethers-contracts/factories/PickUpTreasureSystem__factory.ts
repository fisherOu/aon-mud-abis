/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  PickUpTreasureSystem,
  PickUpTreasureSystemInterface,
} from "../PickUpTreasureSystem";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWorld",
        name: "_world",
        type: "address",
      },
      {
        internalType: "address",
        name: "_components",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Ownable__NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "Ownable__NotTransitiveOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "args",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "coordHash",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "perlin",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "radius",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "seed",
            type: "uint256",
          },
          {
            internalType: "uint256[2]",
            name: "a",
            type: "uint256[2]",
          },
          {
            internalType: "uint256[2][2]",
            name: "b",
            type: "uint256[2][2]",
          },
          {
            internalType: "uint256[2]",
            name: "c",
            type: "uint256[2]",
          },
          {
            internalType: "string",
            name: "treasureType",
            type: "string",
          },
          {
            internalType: "uint64",
            name: "typeId",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "energy",
            type: "uint256",
          },
        ],
        internalType: "struct PickUpInfo",
        name: "pickUpInfo",
        type: "tuple",
      },
    ],
    name: "executeTyped",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620016383803806200163883398101604081905262000034916200022c565b818162000041336200010f565b6001600160a01b03811615620000585780620000bd565b816001600160a01b031663ba62fbe46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000097573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000bd91906200026b565b600080546001600160a01b03199081166001600160a01b0393841690811790925560018054909116928516928317905562000105919062000183602090811b620007c317901c565b5050505062000292565b600062000126620001ef60201b620008541760201c565b80546040519192506001600160a01b03808516929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380546001600160a01b0319166001600160a01b0392909216919091179055565b7ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a8780546001600160a01b039384166001600160a01b0319918216179091557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a868054929093169116179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6001600160a01b03811681146200022957600080fd5b50565b600080604083850312156200024057600080fd5b82516200024d8162000213565b6020840151909250620002608162000213565b809150509250929050565b6000602082840312156200027e57600080fd5b81516200028b8162000213565b9392505050565b61139680620002a26000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806309c5eabe146100515780638da5cb5b1461007a578063f2fde38b146100a7578063f66c8c27146100bc575b600080fd5b61006461005f366004610beb565b6100cf565b6040516100719190610cae565b60405180910390f35b6100826100f9565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610071565b6100ba6100b5366004610cc1565b61013e565b005b6100646100ca366004610ddc565b6101ba565b60606000828060200190518101906100e79190610fae565b90506100f2816101ba565b9392505050565b60006101397f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff1633146101ae576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101b781610878565b50565b6000805460609133916102039073ffffffffffffffffffffffffffffffffffffffff167f9e0b856941fb70fc9b56c896d5f39a2079c3ed041dbc5e87efbf9c503b354b76610881565b73ffffffffffffffffffffffffffffffffffffffff1663209652556040518163ffffffff1660e01b815260040160e060405180830381865afa15801561024d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610271919061109c565b9050806080015167ffffffffffffffff168460400151111580156102a757508060a0015167ffffffffffffffff16846040015111155b610312576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f726164697573206f766572206c696d697400000000000000000000000000000060448201526064015b60405180910390fd5b600080546103569073ffffffffffffffffffffffffffffffffffffffff167f227a211c6d125a9d774669e52dc0800efe47a0b26c3f94606cc2fbbf12eb16db610881565b85516040517ffbdfa1ea000000000000000000000000000000000000000000000000000000008152600481019190915290915060009073ffffffffffffffffffffffffffffffffffffffff83169063fbdfa1ea90602401600060405180830381865afa1580156103ca573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526104109190810190611154565b90506000808251111561043b5781600081518110610430576104306111fa565b602002602001015190505b806000036104d757600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663614bfa6e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d49190611229565b90505b6000805461051b9073ffffffffffffffffffffffffffffffffffffffff167f28b9f73e6b271728535a5e2b6da73f60f1fa049519ed11d9203e38922757cf06610881565b6040517fcccf7a8e0000000000000000000000000000000000000000000000000000000081526004810184905290915073ffffffffffffffffffffffffffffffffffffffff82169063cccf7a8e90602401602060405180830381865afa158015610589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ad9190611242565b15610614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f416c7265616479207069636b65645570000000000000000000000000000000006044820152606401610309565b600080546106589073ffffffffffffffffffffffffffffffffffffffff167faba0920628f0b3ae57d55af83900bf96b519a336c752234d24c5e3c456989958610881565b73ffffffffffffffffffffffffffffffffffffffff1663209652556040518163ffffffff1660e01b8152600401600060405180830381865afa1580156106a2573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526106e89190810190611278565b60005490915061072e9073ffffffffffffffffffffffffffffffffffffffff167f60c75de7a5b0398849a1e84398f8f1f8d3aedeb9bd52b420fb7a970fa1f7c006610881565b73ffffffffffffffffffffffffffffffffffffffff1663408531778860405180604001604052808d610120015181526020018d60e001518152506040518363ffffffff1660e01b815260040161078592919061132b565b600060405180830381600087803b15801561079f57600080fd5b505af11580156107b3573d6000803e3d6000fd5b5050505050505050505050919050565b7ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a87805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a868054929093169116179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6101b7816109cd565b6040517ffbdfa1ea00000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff85169063fbdfa1ea90602401600060405180830381865afa1580156108f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109379190810190611154565b905080516000036109a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6964206e6f7420726567697374657265640000000000000000000000000000006044820152606401610309565b6109c5816000815181106109ba576109ba6111fa565b602002602001015190565b949350505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f671680460805460405173ffffffffffffffffffffffffffffffffffffffff8481169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715610acc57610acc610a79565b60405290565b6040516080810167ffffffffffffffff81118282101715610acc57610acc610a79565b6040805190810167ffffffffffffffff81118282101715610acc57610acc610a79565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610b5f57610b5f610a79565b604052919050565b600067ffffffffffffffff821115610b8157610b81610a79565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6000610bc0610bbb84610b67565b610b18565b9050828152838383011115610bd457600080fd5b828260208301376000602084830101529392505050565b600060208284031215610bfd57600080fd5b813567ffffffffffffffff811115610c1457600080fd5b8201601f81018413610c2557600080fd5b6109c584823560208401610bad565b60005b83811015610c4f578181015183820152602001610c37565b83811115610c5e576000848401525b50505050565b60008151808452610c7c816020860160208601610c34565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006100f26020830184610c64565b600060208284031215610cd357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146100f257600080fd5b600082601f830112610d0857600080fd5b610d10610af5565b806040840185811115610d2257600080fd5b845b81811015610d3c578035845260209384019301610d24565b509095945050505050565b600082601f830112610d5857600080fd5b610d60610af5565b806080840185811115610d7257600080fd5b845b81811015610d3c57610d868782610cf7565b8452602090930192604001610d74565b600082601f830112610da757600080fd5b6100f283833560208501610bad565b67ffffffffffffffff811681146101b757600080fd5b8035610dd781610db6565b919050565b600060208284031215610dee57600080fd5b813567ffffffffffffffff80821115610e0657600080fd5b908301906101e08286031215610e1b57600080fd5b610e23610aa8565b82358152602083013560208201526040830135604082015260608301356060820152610e528660808501610cf7565b6080820152610e648660c08501610d47565b60a0820152610e77866101408501610cf7565b60c082015261018083013582811115610e8f57600080fd5b610e9b87828601610d96565b60e083015250610eae6101a08401610dcc565b6101008201526101c09290920135610120830152509392505050565b600082601f830112610edb57600080fd5b610ee3610af5565b806040840185811115610ef557600080fd5b845b81811015610d3c578051845260209384019301610ef7565b600082601f830112610f2057600080fd5b610f28610af5565b806080840185811115610f3a57600080fd5b845b81811015610d3c57610f4e8782610eca565b8452602090930192604001610f3c565b600082601f830112610f6f57600080fd5b8151610f7d610bbb82610b67565b818152846020838601011115610f9257600080fd5b6109c5826020830160208701610c34565b8051610dd781610db6565b600060208284031215610fc057600080fd5b815167ffffffffffffffff80821115610fd857600080fd5b908301906101e08286031215610fed57600080fd5b610ff5610aa8565b825181526020830151602082015260408301516040820152606083015160608201526110248660808501610eca565b60808201526110368660c08501610f0f565b60a0820152611049866101408501610eca565b60c08201526101808301518281111561106157600080fd5b61106d87828601610f5e565b60e0830152506110806101a08401610fa3565b6101008201526101c09290920151610120830152509392505050565b600060e082840312156110ae57600080fd5b60405160e0810181811067ffffffffffffffff821117156110d1576110d1610a79565b60405282516110df81610db6565b815260208301516110ef81610db6565b6020820152604083015161110281610db6565b6040820152606083015161111581610db6565b606082015261112660808401610fa3565b608082015261113760a08401610fa3565b60a082015261114860c08401610fa3565b60c08201529392505050565b6000602080838503121561116757600080fd5b825167ffffffffffffffff8082111561117f57600080fd5b818501915085601f83011261119357600080fd5b8151818111156111a5576111a5610a79565b8060051b91506111b6848301610b18565b81815291830184019184810190888411156111d057600080fd5b938501935b838510156111ee578451825293850193908501906111d5565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561123b57600080fd5b5051919050565b60006020828403121561125457600080fd5b815180151581146100f257600080fd5b805163ffffffff81168114610dd757600080fd5b60006020828403121561128a57600080fd5b815167ffffffffffffffff808211156112a257600080fd5b90830190608082860312156112b657600080fd5b6112be610ad2565b6112c783611264565b81526112d560208401611264565b60208201526040830151828111156112ec57600080fd5b6112f887828601610f5e565b60408301525060608301518281111561131057600080fd5b61131c87828601610f5e565b60608301525095945050505050565b828152604060208201528151604082015260006020830151604060608401526113576080840182610c64565b9594505050505056fea2646970667358221220a1695f6b93d378fe8a6bbe67bed4c18e40ccb57d0fe962b57117d0b6d0a5bbf464736f6c634300080d0033";

type PickUpTreasureSystemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PickUpTreasureSystemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PickUpTreasureSystem__factory extends ContractFactory {
  constructor(...args: PickUpTreasureSystemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PickUpTreasureSystem> {
    return super.deploy(
      _world,
      _components,
      overrides || {}
    ) as Promise<PickUpTreasureSystem>;
  }
  override getDeployTransaction(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_world, _components, overrides || {});
  }
  override attach(address: string): PickUpTreasureSystem {
    return super.attach(address) as PickUpTreasureSystem;
  }
  override connect(signer: Signer): PickUpTreasureSystem__factory {
    return super.connect(signer) as PickUpTreasureSystem__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PickUpTreasureSystemInterface {
    return new utils.Interface(_abi) as PickUpTreasureSystemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PickUpTreasureSystem {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as PickUpTreasureSystem;
  }
}
