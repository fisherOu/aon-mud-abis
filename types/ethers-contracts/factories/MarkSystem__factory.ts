/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { MarkSystem, MarkSystemInterface } from "../MarkSystem";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWorld",
        name: "_world",
        type: "address",
      },
      {
        internalType: "address",
        name: "_components",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Ownable__NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "Ownable__NotTransitiveOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "args",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "coordHash",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "radius",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "seed",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "realHash",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "distance",
            type: "uint256",
          },
          {
            internalType: "uint256[2]",
            name: "a",
            type: "uint256[2]",
          },
          {
            internalType: "uint256[2][2]",
            name: "b",
            type: "uint256[2][2]",
          },
          {
            internalType: "uint256[2]",
            name: "c",
            type: "uint256[2]",
          },
        ],
        internalType: "struct MarkInfo",
        name: "markInfo",
        type: "tuple",
      },
    ],
    name: "executeTyped",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620014b4380380620014b483398101604081905262000034916200022c565b818162000041336200010f565b6001600160a01b03811615620000585780620000bd565b816001600160a01b031663ba62fbe46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000097573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000bd91906200026b565b600080546001600160a01b03199081166001600160a01b0393841690811790925560018054909116928516928317905562000105919062000183602090811b6200074817901c565b5050505062000292565b600062000126620001ef60201b620007d91760201c565b80546040519192506001600160a01b03808516929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380546001600160a01b0319166001600160a01b0392909216919091179055565b7ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a8780546001600160a01b039384166001600160a01b0319918216179091557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a868054929093169116179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6001600160a01b03811681146200022957600080fd5b50565b600080604083850312156200024057600080fd5b82516200024d8162000213565b6020840151909250620002608162000213565b809150509250929050565b6000602082840312156200027e57600080fd5b81516200028b8162000213565b9392505050565b61121280620002a26000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806309c5eabe146100515780638da5cb5b1461007a5780639a744c63146100a7578063f2fde38b146100ba575b600080fd5b61006461005f366004610ac8565b6100cf565b6040516100719190610b7b565b60405180910390f35b6100826100f9565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610071565b6100646100b5366004610c3e565b61013e565b6100cd6100c8366004610d2a565b6106cc565b005b60606000828060200190518101906100e79190610d8c565b90506100f28161013e565b9392505050565b60006101397f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b60008054606091906101869073ffffffffffffffffffffffffffffffffffffffff167fd0deb8af54f5692432398f7f62bf53c9e54e6d6a9b4dbccb012b3fe04ea432d36107fd565b73ffffffffffffffffffffffffffffffffffffffff1663209652556040518163ffffffff1660e01b8152600401606060405180830381865afa1580156101d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f49190610e59565b80519091501561033457604080516060810182528482015181526020808601518183015285518284015283015160a086015160c087015160e088015194517f11479fea000000000000000000000000000000000000000000000000000000008152939473ffffffffffffffffffffffffffffffffffffffff909316936311479fea936102869392918790600401610ef2565b602060405180830381865afa1580156102a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c79190610f76565b610332576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4661696c6564206d61726b2070726f6f6620636865636b00000000000000000060448201526064015b60405180910390fd5b505b600080546103789073ffffffffffffffffffffffffffffffffffffffff167f9e0b856941fb70fc9b56c896d5f39a2079c3ed041dbc5e87efbf9c503b354b766107fd565b73ffffffffffffffffffffffffffffffffffffffff1663209652556040518163ffffffff1660e01b815260040160e060405180830381865afa1580156103c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e69190610fa9565b9050806080015167ffffffffffffffff1684602001511115801561041c57508060a0015167ffffffffffffffff16846020015111155b610482576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f726164697573206f766572206c696d69740000000000000000000000000000006044820152606401610329565b600080546104c69073ffffffffffffffffffffffffffffffffffffffff167f7b6e1afc104b7e498d92a5202135a932fbd13a556799eb8b3b435da6f581acca6107fd565b73ffffffffffffffffffffffffffffffffffffffff1663209652556040518163ffffffff1660e01b81526004016040805180830381865afa15801561050f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105339190611059565b9050806020015167ffffffffffffffff16856080015111156105b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6d61726b20746f6f2066617200000000000000000000000000000000000000006044820152606401610329565b6000546105f49073ffffffffffffffffffffffffffffffffffffffff167f4b1ac4c3aa37732e927cbff52c019e9fbdad0f3e454031afaefd319a3dc66ce46107fd565b73ffffffffffffffffffffffffffffffffffffffff1663df49b421866060015160405180604001604052808960400151815260200185600001514261063991906110b4565b67ffffffffffffffff9081169091526040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b168152600481019390935281516024840152602090910151166044820152606401600060405180830381600087803b1580156106ac57600080fd5b505af11580156106c0573d6000803e3d6000fd5b50505050505050919050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff16331461073c576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61074581610949565b50565b7ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a87805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a868054929093169116179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6040517ffbdfa1ea00000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff85169063fbdfa1ea90602401600060405180830381865afa15801561086d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526108b39190810190611107565b90508051600003610920576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6964206e6f7420726567697374657265640000000000000000000000000000006044820152606401610329565b61094181600081518110610936576109366111ad565b602002602001015190565b949350505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804608054604051610745928492909173ffffffffffffffffffffffffffffffffffffffff8085169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715610a5057610a506109fd565b60405290565b6040805190810167ffffffffffffffff81118282101715610a5057610a506109fd565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610ac057610ac06109fd565b604052919050565b60006020808385031215610adb57600080fd5b823567ffffffffffffffff80821115610af357600080fd5b818501915085601f830112610b0757600080fd5b813581811115610b1957610b196109fd565b610b49847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610a79565b91508082528684828501011115610b5f57600080fd5b8084840185840137600090820190930192909252509392505050565b600060208083528351808285015260005b81811015610ba857858101830151858201604001528201610b8c565b81811115610bba576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600082601f830112610bff57600080fd5b610c07610a56565b806040840185811115610c1957600080fd5b845b81811015610c33578035845260209384019301610c1b565b509095945050505050565b60006101a08284031215610c5157600080fd5b610c59610a2c565b8235815260208084013581830152604080850135818401526060850135606084015260808501356080840152610c928660a08701610bee565b60a08401528560ff860112610ca657600080fd5b610cae610a56565b80610160870188811115610cc157600080fd5b60e088015b81811015610ce557610cd88a82610bee565b8452928501928401610cc6565b508160c0870152610cf68982610bee565b60e08701525093979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461074557600080fd5b600060208284031215610d3c57600080fd5b81356100f281610d08565b600082601f830112610d5857600080fd5b610d60610a56565b806040840185811115610d7257600080fd5b845b81811015610c33578051845260209384019301610d74565b60006101a08284031215610d9f57600080fd5b610da7610a2c565b8251815260208084015181830152604080850151818401526060850151606084015260808501516080840152610de08660a08701610d47565b60a08401528560ff860112610df457600080fd5b610dfc610a56565b80610160870188811115610e0f57600080fd5b60e088015b81811015610e3357610e268a82610d47565b8452928501928401610e14565b508160c0870152610cf68982610d47565b80518015158114610e5457600080fd5b919050565b600060608284031215610e6b57600080fd5b6040516060810181811067ffffffffffffffff82111715610e8e57610e8e6109fd565b604052610e9a83610e44565b81526020830151610eaa81610d08565b60208201526040830151610ebd81610d08565b60408201529392505050565b8060005b6002811015610eec578151845260209384019390910190600101610ecd565b50505050565b6101608101610f018287610ec9565b60408083018660005b6002811015610f3157610f1e838351610ec9565b9183019160209190910190600101610f0a565b50505050610f4260c0830185610ec9565b61010082018360005b6003811015610f6a578151835260209283019290910190600101610f4b565b50505095945050505050565b600060208284031215610f8857600080fd5b6100f282610e44565b805167ffffffffffffffff81168114610e5457600080fd5b600060e08284031215610fbb57600080fd5b60405160e0810181811067ffffffffffffffff82111715610fde57610fde6109fd565b604052610fea83610f91565b8152610ff860208401610f91565b602082015261100960408401610f91565b604082015261101a60608401610f91565b606082015261102b60808401610f91565b608082015261103c60a08401610f91565b60a082015261104d60c08401610f91565b60c08201529392505050565b60006040828403121561106b57600080fd5b6040516040810181811067ffffffffffffffff8211171561108e5761108e6109fd565b60405261109a83610f91565b81526110a860208401610f91565b60208201529392505050565b600067ffffffffffffffff8083168185168083038211156110fe577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b01949350505050565b6000602080838503121561111a57600080fd5b825167ffffffffffffffff8082111561113257600080fd5b818501915085601f83011261114657600080fd5b815181811115611158576111586109fd565b8060051b9150611169848301610a79565b818152918301840191848101908884111561118357600080fd5b938501935b838510156111a157845182529385019390850190611188565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212208a9d0e3a0e13e031bc1918d84840225d1dae1305e4e5197adf44fb7c6b84793364736f6c634300080d0033";

type MarkSystemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MarkSystemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MarkSystem__factory extends ContractFactory {
  constructor(...args: MarkSystemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MarkSystem> {
    return super.deploy(
      _world,
      _components,
      overrides || {}
    ) as Promise<MarkSystem>;
  }
  override getDeployTransaction(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_world, _components, overrides || {});
  }
  override attach(address: string): MarkSystem {
    return super.attach(address) as MarkSystem;
  }
  override connect(signer: Signer): MarkSystem__factory {
    return super.connect(signer) as MarkSystem__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MarkSystemInterface {
    return new utils.Interface(_abi) as MarkSystemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MarkSystem {
    return new Contract(address, _abi, signerOrProvider) as MarkSystem;
  }
}
