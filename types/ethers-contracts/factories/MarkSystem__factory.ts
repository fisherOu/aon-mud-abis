/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { MarkSystem, MarkSystemInterface } from "../MarkSystem";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWorld",
        name: "_world",
        type: "address",
      },
      {
        internalType: "address",
        name: "_components",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Ownable__NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "Ownable__NotTransitiveOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "args",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "coordHash",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "perlin",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "radius",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "seed",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "realHash",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "distance",
            type: "uint256",
          },
          {
            internalType: "uint256[2]",
            name: "a",
            type: "uint256[2]",
          },
          {
            internalType: "uint256[2][2]",
            name: "b",
            type: "uint256[2][2]",
          },
          {
            internalType: "uint256[2]",
            name: "c",
            type: "uint256[2]",
          },
        ],
        internalType: "struct MarkInfo",
        name: "markInfo",
        type: "tuple",
      },
    ],
    name: "executeTyped",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620011a6380380620011a683398101604081905262000034916200022c565b818162000041336200010f565b6001600160a01b03811615620000585780620000bd565b816001600160a01b031663ba62fbe46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000097573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000bd91906200026b565b600080546001600160a01b03199081166001600160a01b0393841690811790925560018054909116928516928317905562000105919062000183602090811b6200055a17901c565b5050505062000292565b600062000126620001ef60201b620005eb1760201c565b80546040519192506001600160a01b03808516929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380546001600160a01b0319166001600160a01b0392909216919091179055565b7ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a8780546001600160a01b039384166001600160a01b0319918216179091557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a868054929093169116179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6001600160a01b03811681146200022957600080fd5b50565b600080604083850312156200024057600080fd5b82516200024d8162000213565b6020840151909250620002608162000213565b809150509250929050565b6000602082840312156200027e57600080fd5b81516200028b8162000213565b9392505050565b610f0480620002a26000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806309c5eabe1461005157806336a1b8291461007a5780638da5cb5b1461008d578063f2fde38b146100ba575b600080fd5b61006461005f3660046108da565b6100cf565b604051610071919061098d565b60405180910390f35b610064610088366004610a9f565b6100f9565b610095610499565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610071565b6100cd6100c8366004610b2f565b6104de565b005b60606000828060200190518101906100e79190610bf9565b90506100f2816100f9565b9392505050565b60008054606091906101419073ffffffffffffffffffffffffffffffffffffffff167f9e0b856941fb70fc9b56c896d5f39a2079c3ed041dbc5e87efbf9c503b354b7661060f565b73ffffffffffffffffffffffffffffffffffffffff1663209652556040518163ffffffff1660e01b815260040160e060405180830381865afa15801561018b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101af9190610c9b565b9050806080015167ffffffffffffffff168360400151111580156101e557508060a0015167ffffffffffffffff16836040015111155b610250576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f726164697573206f766572206c696d697400000000000000000000000000000060448201526064015b60405180910390fd5b600080546102949073ffffffffffffffffffffffffffffffffffffffff167f7b6e1afc104b7e498d92a5202135a932fbd13a556799eb8b3b435da6f581acca61060f565b73ffffffffffffffffffffffffffffffffffffffff1663209652556040518163ffffffff1660e01b81526004016040805180830381865afa1580156102dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103019190610d4b565b9050806020015167ffffffffffffffff168460a00151111561037f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6d61726b20746f6f2066617200000000000000000000000000000000000000006044820152606401610247565b6000546103c29073ffffffffffffffffffffffffffffffffffffffff167f4b1ac4c3aa37732e927cbff52c019e9fbdad0f3e454031afaefd319a3dc66ce461060f565b73ffffffffffffffffffffffffffffffffffffffff1663df49b42185608001516040518060400160405280886060015181526020018560000151426104079190610da6565b67ffffffffffffffff9081169091526040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b168152600481019390935281516024840152602090910151166044820152606401600060405180830381600087803b15801561047a57600080fd5b505af115801561048e573d6000803e3d6000fd5b505050505050919050565b60006104d97f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff16331461054e576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105578161075b565b50565b7ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a87805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a868054929093169116179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6040517ffbdfa1ea00000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff85169063fbdfa1ea90602401600060405180830381865afa15801561067f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526106c59190810190610df9565b90508051600003610732576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6964206e6f7420726567697374657265640000000000000000000000000000006044820152606401610247565b6107538160008151811061074857610748610e9f565b602002602001015190565b949350505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804608054604051610557928492909173ffffffffffffffffffffffffffffffffffffffff8085169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156108625761086261080f565b60405290565b6040805190810167ffffffffffffffff811182821017156108625761086261080f565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156108d2576108d261080f565b604052919050565b600060208083850312156108ed57600080fd5b823567ffffffffffffffff8082111561090557600080fd5b818501915085601f83011261091957600080fd5b81358181111561092b5761092b61080f565b61095b847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160161088b565b9150808252868482850101111561097157600080fd5b8084840185840137600090820190930192909252509392505050565b600060208083528351808285015260005b818110156109ba5785810183015185820160400152820161099e565b818111156109cc576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600082601f830112610a1157600080fd5b610a19610868565b806040840185811115610a2b57600080fd5b845b81811015610a45578035845260209384019301610a2d565b509095945050505050565b600082601f830112610a6157600080fd5b610a69610868565b806080840185811115610a7b57600080fd5b845b81811015610a4557610a8f8782610a00565b8452602090930192604001610a7d565b60006101c08284031215610ab257600080fd5b610aba61083e565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a0820152610afd8460c08501610a00565b60c0820152610100610b1185828601610a50565b60e0830152610b24856101808601610a00565b908201529392505050565b600060208284031215610b4157600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146100f257600080fd5b600082601f830112610b7657600080fd5b610b7e610868565b806040840185811115610b9057600080fd5b845b81811015610a45578051845260209384019301610b92565b600082601f830112610bbb57600080fd5b610bc3610868565b806080840185811115610bd557600080fd5b845b81811015610a4557610be98782610b65565b8452602090930192604001610bd7565b60006101c08284031215610c0c57600080fd5b610c1461083e565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a0820152610c578460c08501610b65565b60c0820152610100610c6b85828601610baa565b60e0830152610b24856101808601610b65565b805167ffffffffffffffff81168114610c9657600080fd5b919050565b600060e08284031215610cad57600080fd5b60405160e0810181811067ffffffffffffffff82111715610cd057610cd061080f565b604052610cdc83610c7e565b8152610cea60208401610c7e565b6020820152610cfb60408401610c7e565b6040820152610d0c60608401610c7e565b6060820152610d1d60808401610c7e565b6080820152610d2e60a08401610c7e565b60a0820152610d3f60c08401610c7e565b60c08201529392505050565b600060408284031215610d5d57600080fd5b6040516040810181811067ffffffffffffffff82111715610d8057610d8061080f565b604052610d8c83610c7e565b8152610d9a60208401610c7e565b60208201529392505050565b600067ffffffffffffffff808316818516808303821115610df0577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b01949350505050565b60006020808385031215610e0c57600080fd5b825167ffffffffffffffff80821115610e2457600080fd5b818501915085601f830112610e3857600080fd5b815181811115610e4a57610e4a61080f565b8060051b9150610e5b84830161088b565b8181529183018401918481019088841115610e7557600080fd5b938501935b83851015610e9357845182529385019390850190610e7a565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220e677d738dd353b6e3f07cd84d4d56df4079f9d1fd8aec69ee2a34bf6fba3434164736f6c634300080d0033";

type MarkSystemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MarkSystemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MarkSystem__factory extends ContractFactory {
  constructor(...args: MarkSystemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MarkSystem> {
    return super.deploy(
      _world,
      _components,
      overrides || {}
    ) as Promise<MarkSystem>;
  }
  override getDeployTransaction(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_world, _components, overrides || {});
  }
  override attach(address: string): MarkSystem {
    return super.attach(address) as MarkSystem;
  }
  override connect(signer: Signer): MarkSystem__factory {
    return super.connect(signer) as MarkSystem__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MarkSystemInterface {
    return new utils.Interface(_abi) as MarkSystemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MarkSystem {
    return new Contract(address, _abi, signerOrProvider) as MarkSystem;
  }
}
