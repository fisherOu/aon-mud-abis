/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { MarkSystem, MarkSystemInterface } from "../MarkSystem";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWorld",
        name: "_world",
        type: "address",
      },
      {
        internalType: "address",
        name: "_components",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Ownable__NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "Ownable__NotTransitiveOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "args",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "coordHash",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "width",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "height",
            type: "uint256",
          },
          {
            internalType: "uint256[2]",
            name: "a",
            type: "uint256[2]",
          },
          {
            internalType: "uint256[2][2]",
            name: "b",
            type: "uint256[2][2]",
          },
          {
            internalType: "uint256[2]",
            name: "c",
            type: "uint256[2]",
          },
        ],
        internalType: "struct MarkInfo",
        name: "markInfo",
        type: "tuple",
      },
    ],
    name: "executeTyped",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620017773803806200177783398101604081905262000034916200022c565b818162000041336200010f565b6001600160a01b03811615620000585780620000bd565b816001600160a01b031663ba62fbe46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000097573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000bd91906200026b565b600080546001600160a01b03199081166001600160a01b0393841690811790925560018054909116928516928317905562000105919062000183602090811b6200091217901c565b5050505062000292565b600062000126620001ef60201b620009a31760201c565b80546040519192506001600160a01b03808516929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380546001600160a01b0319166001600160a01b0392909216919091179055565b7ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a8780546001600160a01b039384166001600160a01b0319918216179091557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a868054929093169116179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6001600160a01b03811681146200022957600080fd5b50565b600080604083850312156200024057600080fd5b82516200024d8162000213565b6020840151909250620002608162000213565b809150509250929050565b6000602082840312156200027e57600080fd5b81516200028b8162000213565b9392505050565b6114d580620002a26000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806309c5eabe1461005157806377bde9531461007a5780638da5cb5b1461008d578063f2fde38b146100ba575b600080fd5b61006461005f366004610cb5565b6100cf565b6040516100719190610d68565b60405180910390f35b610064610088366004610e2b565b6100f9565b610095610851565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610071565b6100cd6100c8366004610f03565b610896565b005b60606000828060200190518101906100e79190610f65565b90506100f2816100f9565b9392505050565b60008054606091906101419073ffffffffffffffffffffffffffffffffffffffff167fd0deb8af54f5692432398f7f62bf53c9e54e6d6a9b4dbccb012b3fe04ea432d36109c7565b73ffffffffffffffffffffffffffffffffffffffff1663209652556040518163ffffffff1660e01b815260040161014060405180830381865afa15801561018c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b09190611029565b8051909150156102f1576040805160608082018352855182526020808701519083015285830151828401528381015190860151608087015160a088015194517f11479fea000000000000000000000000000000000000000000000000000000008152939473ffffffffffffffffffffffffffffffffffffffff909316936311479fea93610243939291879060040161111a565b602060405180830381865afa158015610260573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610284919061119e565b6102ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4661696c6564206d61726b2070726f6f6620636865636b00000000000000000060448201526064015b60405180910390fd5b505b600080546103359073ffffffffffffffffffffffffffffffffffffffff167f9e0b856941fb70fc9b56c896d5f39a2079c3ed041dbc5e87efbf9c503b354b766109c7565b73ffffffffffffffffffffffffffffffffffffffff1663209652556040518163ffffffff1660e01b815260040160e060405180830381865afa15801561037f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a391906111d1565b9050806080015167ffffffffffffffff168460200151111580156103d957508060a0015167ffffffffffffffff16846040015111155b61043f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f726164697573206f766572206c696d697400000000000000000000000000000060448201526064016102e6565b600080546104839073ffffffffffffffffffffffffffffffffffffffff167f7b6e1afc104b7e498d92a5202135a932fbd13a556799eb8b3b435da6f581acca6109c7565b73ffffffffffffffffffffffffffffffffffffffff1663209652556040518163ffffffff1660e01b81526004016040805180830381865afa1580156104cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f09190611281565b60008054919250906105389073ffffffffffffffffffffffffffffffffffffffff167f4b1ac4c3aa37732e927cbff52c019e9fbdad0f3e454031afaefd319a3dc66ce46109c7565b60008054919250906105809073ffffffffffffffffffffffffffffffffffffffff167fd65d260f5f5c04658319eb649c1b2668791985f80e1dc9150523f9df6efd57b46109c7565b73ffffffffffffffffffffffffffffffffffffffff1663209652556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ee91906112f0565b87516040517fcccf7a8e00000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff84169163cccf7a8e916106479160040190815260200190565b602060405180830381865afa158015610664573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610688919061119e565b1561075f5786516040517f0ff4c91600000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff851691630ff4c916916106e69160040190815260200190565b606060405180830381865afa158015610703573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610727919061130b565b9050806040015115801561075357504267ffffffffffffffff16816020015167ffffffffffffffff1610155b1561075d57805191505b505b8173ffffffffffffffffffffffffffffffffffffffff1663951f1659886000015160405180606001604052808563ffffffff1681526020018760000151426107a79190611377565b67ffffffffffffffff908116825260006020928301526040805160e087901b7fffffffff000000000000000000000000000000000000000000000000000000001681526004810195909552835163ffffffff16602486015291830151166044840152015115156064820152608401600060405180830381600087803b15801561082f57600080fd5b505af1158015610843573d6000803e3d6000fd5b505050505050505050919050565b60006108917f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff163314610906576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61090f81610b13565b50565b7ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a87805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a868054929093169116179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6040517ffbdfa1ea00000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff85169063fbdfa1ea90602401600060405180830381865afa158015610a37573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a7d91908101906113ca565b90508051600003610aea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6964206e6f74207265676973746572656400000000000000000000000000000060448201526064016102e6565b610b0b81600081518110610b0057610b00611470565b602002602001015190565b949350505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f671680460805460405161090f928492909173ffffffffffffffffffffffffffffffffffffffff8085169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715610c1957610c19610bc7565b60405290565b604051610140810167ffffffffffffffff81118282101715610c1957610c19610bc7565b6040805190810167ffffffffffffffff81118282101715610c1957610c19610bc7565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610cad57610cad610bc7565b604052919050565b60006020808385031215610cc857600080fd5b823567ffffffffffffffff80821115610ce057600080fd5b818501915085601f830112610cf457600080fd5b813581811115610d0657610d06610bc7565b610d36847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610c66565b91508082528684828501011115610d4c57600080fd5b8084840185840137600090820190930192909252509392505050565b600060208083528351808285015260005b81811015610d9557858101830151858201604001528201610d79565b81811115610da7576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600082601f830112610dec57600080fd5b610df4610c43565b806040840185811115610e0657600080fd5b845b81811015610e20578035845260209384019301610e08565b509095945050505050565b60006101608284031215610e3e57600080fd5b610e46610bf6565b823581526020808401358183015260408085013581840152610e6b8660608701610ddb565b60608401528560bf860112610e7f57600080fd5b610e87610c43565b80610120870188811115610e9a57600080fd5b60a088015b81811015610ebe57610eb18a82610ddb565b8452928501928401610e9f565b50816080870152610ecf8982610ddb565b60a08701525093979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461090f57600080fd5b600060208284031215610f1557600080fd5b81356100f281610ee1565b600082601f830112610f3157600080fd5b610f39610c43565b806040840185811115610f4b57600080fd5b845b81811015610e20578051845260209384019301610f4d565b60006101608284031215610f7857600080fd5b610f80610bf6565b825181526020808401518183015260408085015181840152610fa58660608701610f20565b60608401528560bf860112610fb957600080fd5b610fc1610c43565b80610120870188811115610fd457600080fd5b60a088015b81811015610ff857610feb8a82610f20565b8452928501928401610fd9565b50816080870152610ecf8982610f20565b8051801515811461101957600080fd5b919050565b805161101981610ee1565b6000610140828403121561103c57600080fd5b611044610c1f565b61104d83611009565b815261105b6020840161101e565b602082015261106c6040840161101e565b604082015261107d6060840161101e565b606082015261108e6080840161101e565b608082015261109f60a0840161101e565b60a08201526110b060c0840161101e565b60c08201526110c160e0840161101e565b60e08201526101006110d481850161101e565b908201526101206110e684820161101e565b908201529392505050565b8060005b60028110156111145781518452602093840193909101906001016110f5565b50505050565b610160810161112982876110f1565b60408083018660005b6002811015611159576111468383516110f1565b9183019160209190910190600101611132565b5050505061116a60c08301856110f1565b61010082018360005b6003811015611192578151835260209283019290910190600101611173565b50505095945050505050565b6000602082840312156111b057600080fd5b6100f282611009565b805167ffffffffffffffff8116811461101957600080fd5b600060e082840312156111e357600080fd5b60405160e0810181811067ffffffffffffffff8211171561120657611206610bc7565b604052611212836111b9565b8152611220602084016111b9565b6020820152611231604084016111b9565b6040820152611242606084016111b9565b6060820152611253608084016111b9565b608082015261126460a084016111b9565b60a082015261127560c084016111b9565b60c08201529392505050565b60006040828403121561129357600080fd5b6040516040810181811067ffffffffffffffff821117156112b6576112b6610bc7565b6040526112c2836111b9565b81526112d0602084016111b9565b60208201529392505050565b805163ffffffff8116811461101957600080fd5b60006020828403121561130257600080fd5b6100f2826112dc565b60006060828403121561131d57600080fd5b6040516060810181811067ffffffffffffffff8211171561134057611340610bc7565b60405261134c836112dc565b815261135a602084016111b9565b602082015261136b60408401611009565b60408201529392505050565b600067ffffffffffffffff8083168185168083038211156113c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b01949350505050565b600060208083850312156113dd57600080fd5b825167ffffffffffffffff808211156113f557600080fd5b818501915085601f83011261140957600080fd5b81518181111561141b5761141b610bc7565b8060051b915061142c848301610c66565b818152918301840191848101908884111561144657600080fd5b938501935b838510156114645784518252938501939085019061144b565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220f930a4a08971f3c994f630f7d6ef0b097c5a87907ee34e4973b225a31d3ea06664736f6c634300080d0033";

type MarkSystemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MarkSystemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MarkSystem__factory extends ContractFactory {
  constructor(...args: MarkSystemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MarkSystem> {
    return super.deploy(
      _world,
      _components,
      overrides || {}
    ) as Promise<MarkSystem>;
  }
  override getDeployTransaction(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_world, _components, overrides || {});
  }
  override attach(address: string): MarkSystem {
    return super.attach(address) as MarkSystem;
  }
  override connect(signer: Signer): MarkSystem__factory {
    return super.connect(signer) as MarkSystem__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MarkSystemInterface {
    return new utils.Interface(_abi) as MarkSystemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MarkSystem {
    return new Contract(address, _abi, signerOrProvider) as MarkSystem;
  }
}
