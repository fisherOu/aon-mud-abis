/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { MarkSystem, MarkSystemInterface } from "../MarkSystem";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWorld",
        name: "_world",
        type: "address",
      },
      {
        internalType: "address",
        name: "_components",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Ownable__NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "Ownable__NotTransitiveOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "args",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "coordHash",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "width",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "height",
            type: "uint256",
          },
          {
            internalType: "uint256[2]",
            name: "a",
            type: "uint256[2]",
          },
          {
            internalType: "uint256[2][2]",
            name: "b",
            type: "uint256[2][2]",
          },
          {
            internalType: "uint256[2]",
            name: "c",
            type: "uint256[2]",
          },
        ],
        internalType: "struct MarkInfo",
        name: "markInfo",
        type: "tuple",
      },
    ],
    name: "executeTyped",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620015713803806200157183398101604081905262000034916200022c565b818162000041336200010f565b6001600160a01b03811615620000585780620000bd565b816001600160a01b031663ba62fbe46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000097573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000bd91906200026b565b600080546001600160a01b03199081166001600160a01b0393841690811790925560018054909116928516928317905562000105919062000183602090811b620007a317901c565b5050505062000292565b600062000126620001ef60201b620008341760201c565b80546040519192506001600160a01b03808516929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380546001600160a01b0319166001600160a01b0392909216919091179055565b7ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a8780546001600160a01b039384166001600160a01b0319918216179091557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a868054929093169116179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6001600160a01b03811681146200022957600080fd5b50565b600080604083850312156200024057600080fd5b82516200024d8162000213565b6020840151909250620002608162000213565b809150509250929050565b6000602082840312156200027e57600080fd5b81516200028b8162000213565b9392505050565b6112cf80620002a26000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806309c5eabe1461005157806377bde9531461007a5780638da5cb5b1461008d578063f2fde38b146100ba575b600080fd5b61006461005f366004610b22565b6100cf565b6040516100719190610bd5565b60405180910390f35b610064610088366004610c98565b6100f9565b6100956106e2565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610071565b6100cd6100c8366004610d70565b610727565b005b60606000828060200190518101906100e79190610dd2565b90506100f2816100f9565b9392505050565b60008054606091906101419073ffffffffffffffffffffffffffffffffffffffff167fd0deb8af54f5692432398f7f62bf53c9e54e6d6a9b4dbccb012b3fe04ea432d3610858565b73ffffffffffffffffffffffffffffffffffffffff1663209652556040518163ffffffff1660e01b815260040161010060405180830381865afa15801561018c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b09190610e96565b8051909150156102f1576040805160608082018352855182526020808701519083015285830151828401528381015190860151608087015160a088015194517f11479fea000000000000000000000000000000000000000000000000000000008152939473ffffffffffffffffffffffffffffffffffffffff909316936311479fea936102439392918790600401610f89565b602060405180830381865afa158015610260573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610284919061100d565b6102ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4661696c6564206d61726b2070726f6f6620636865636b00000000000000000060448201526064015b60405180910390fd5b505b600080546103359073ffffffffffffffffffffffffffffffffffffffff167f9e0b856941fb70fc9b56c896d5f39a2079c3ed041dbc5e87efbf9c503b354b76610858565b73ffffffffffffffffffffffffffffffffffffffff1663209652556040518163ffffffff1660e01b815260040160e060405180830381865afa15801561037f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a39190611040565b9050806080015167ffffffffffffffff168460200151111580156103d957508060a0015167ffffffffffffffff16846040015111155b61043f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f726164697573206f766572206c696d697400000000000000000000000000000060448201526064016102e6565b600080546104839073ffffffffffffffffffffffffffffffffffffffff167f7b6e1afc104b7e498d92a5202135a932fbd13a556799eb8b3b435da6f581acca610858565b73ffffffffffffffffffffffffffffffffffffffff1663209652556040518163ffffffff1660e01b81526004016040805180830381865afa1580156104cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f091906110f0565b60008054919250906105389073ffffffffffffffffffffffffffffffffffffffff167f4b1ac4c3aa37732e927cbff52c019e9fbdad0f3e454031afaefd319a3dc66ce4610858565b60008054919250906105809073ffffffffffffffffffffffffffffffffffffffff167fd65d260f5f5c04658319eb649c1b2668791985f80e1dc9150523f9df6efd57b4610858565b73ffffffffffffffffffffffffffffffffffffffff1663209652556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ee919061114b565b90508173ffffffffffffffffffffffffffffffffffffffff1663951f1659886000015160405180606001604052808563ffffffff1681526020018760000151426106389190611171565b67ffffffffffffffff908116825260006020928301526040805160e087901b7fffffffff000000000000000000000000000000000000000000000000000000001681526004810195909552835163ffffffff16602486015291830151166044840152015115156064820152608401600060405180830381600087803b1580156106c057600080fd5b505af11580156106d4573d6000803e3d6000fd5b505050505050505050919050565b60006107227f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff163314610797576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107a0816109a4565b50565b7ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a87805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a868054929093169116179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6040517ffbdfa1ea00000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff85169063fbdfa1ea90602401600060405180830381865afa1580156108c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261090e91908101906111c4565b9050805160000361097b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6964206e6f74207265676973746572656400000000000000000000000000000060448201526064016102e6565b61099c816000815181106109915761099161126a565b602002602001015190565b949350505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046080546040516107a0928492909173ffffffffffffffffffffffffffffffffffffffff8085169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715610aaa57610aaa610a58565b60405290565b6040805190810167ffffffffffffffff81118282101715610aaa57610aaa610a58565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610b1a57610b1a610a58565b604052919050565b60006020808385031215610b3557600080fd5b823567ffffffffffffffff80821115610b4d57600080fd5b818501915085601f830112610b6157600080fd5b813581811115610b7357610b73610a58565b610ba3847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610ad3565b91508082528684828501011115610bb957600080fd5b8084840185840137600090820190930192909252509392505050565b600060208083528351808285015260005b81811015610c0257858101830151858201604001528201610be6565b81811115610c14576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600082601f830112610c5957600080fd5b610c61610ab0565b806040840185811115610c7357600080fd5b845b81811015610c8d578035845260209384019301610c75565b509095945050505050565b60006101608284031215610cab57600080fd5b610cb3610a87565b823581526020808401358183015260408085013581840152610cd88660608701610c48565b60608401528560bf860112610cec57600080fd5b610cf4610ab0565b80610120870188811115610d0757600080fd5b60a088015b81811015610d2b57610d1e8a82610c48565b8452928501928401610d0c565b50816080870152610d3c8982610c48565b60a08701525093979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff811681146107a057600080fd5b600060208284031215610d8257600080fd5b81356100f281610d4e565b600082601f830112610d9e57600080fd5b610da6610ab0565b806040840185811115610db857600080fd5b845b81811015610c8d578051845260209384019301610dba565b60006101608284031215610de557600080fd5b610ded610a87565b825181526020808401518183015260408085015181840152610e128660608701610d8d565b60608401528560bf860112610e2657600080fd5b610e2e610ab0565b80610120870188811115610e4157600080fd5b60a088015b81811015610e6557610e588a82610d8d565b8452928501928401610e46565b50816080870152610d3c8982610d8d565b80518015158114610e8657600080fd5b919050565b8051610e8681610d4e565b6000610100808385031215610eaa57600080fd5b6040519081019067ffffffffffffffff82118183101715610ecd57610ecd610a58565b81604052610eda84610e76565b815260208401519150610eec82610d4e565b816020820152610efe60408501610e8b565b6040820152610f0f60608501610e8b565b6060820152610f2060808501610e8b565b6080820152610f3160a08501610e8b565b60a0820152610f4260c08501610e8b565b60c0820152610f5360e08501610e8b565b60e0820152949350505050565b8060005b6002811015610f83578151845260209384019390910190600101610f64565b50505050565b6101608101610f988287610f60565b60408083018660005b6002811015610fc857610fb5838351610f60565b9183019160209190910190600101610fa1565b50505050610fd960c0830185610f60565b61010082018360005b6003811015611001578151835260209283019290910190600101610fe2565b50505095945050505050565b60006020828403121561101f57600080fd5b6100f282610e76565b805167ffffffffffffffff81168114610e8657600080fd5b600060e0828403121561105257600080fd5b60405160e0810181811067ffffffffffffffff8211171561107557611075610a58565b60405261108183611028565b815261108f60208401611028565b60208201526110a060408401611028565b60408201526110b160608401611028565b60608201526110c260808401611028565b60808201526110d360a08401611028565b60a08201526110e460c08401611028565b60c08201529392505050565b60006040828403121561110257600080fd5b6040516040810181811067ffffffffffffffff8211171561112557611125610a58565b60405261113183611028565b815261113f60208401611028565b60208201529392505050565b60006020828403121561115d57600080fd5b815163ffffffff811681146100f257600080fd5b600067ffffffffffffffff8083168185168083038211156111bb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b01949350505050565b600060208083850312156111d757600080fd5b825167ffffffffffffffff808211156111ef57600080fd5b818501915085601f83011261120357600080fd5b81518181111561121557611215610a58565b8060051b9150611226848301610ad3565b818152918301840191848101908884111561124057600080fd5b938501935b8385101561125e57845182529385019390850190611245565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122021a97d15b1d93f17c2b044b6bf27370814e42169cca633dbd7bf6c2a933d43a564736f6c634300080d0033";

type MarkSystemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MarkSystemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MarkSystem__factory extends ContractFactory {
  constructor(...args: MarkSystemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MarkSystem> {
    return super.deploy(
      _world,
      _components,
      overrides || {}
    ) as Promise<MarkSystem>;
  }
  override getDeployTransaction(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_world, _components, overrides || {});
  }
  override attach(address: string): MarkSystem {
    return super.attach(address) as MarkSystem;
  }
  override connect(signer: Signer): MarkSystem__factory {
    return super.connect(signer) as MarkSystem__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MarkSystemInterface {
    return new utils.Interface(_abi) as MarkSystemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MarkSystem {
    return new Contract(address, _abi, signerOrProvider) as MarkSystem;
  }
}
