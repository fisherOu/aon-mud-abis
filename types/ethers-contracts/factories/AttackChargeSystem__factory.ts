/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  AttackChargeSystem,
  AttackChargeSystemInterface,
} from "../AttackChargeSystem";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWorld",
        name: "_world",
        type: "address",
      },
      {
        internalType: "address",
        name: "_components",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Ownable__NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "Ownable__NotTransitiveOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "args",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "coordHash",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "width",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "height",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "seed",
            type: "uint256",
          },
          {
            internalType: "uint256[2]",
            name: "a",
            type: "uint256[2]",
          },
          {
            internalType: "uint256[2][2]",
            name: "b",
            type: "uint256[2][2]",
          },
          {
            internalType: "uint256[2]",
            name: "c",
            type: "uint256[2]",
          },
          {
            internalType: "uint256",
            name: "direction",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "realHash",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "perlin",
            type: "uint256",
          },
        ],
        internalType: "struct AttackChargeInfo",
        name: "attackInfo",
        type: "tuple",
      },
    ],
    name: "executeTyped",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000ede38038062000ede83398101604081905262000034916200022c565b818162000041336200010f565b6001600160a01b03811615620000585780620000bd565b816001600160a01b031663ba62fbe46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000097573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000bd91906200026b565b600080546001600160a01b03199081166001600160a01b0393841690811790925560018054909116928516928317905562000105919062000183602090811b6200031917901c565b5050505062000292565b600062000126620001ef60201b620003aa1760201c565b80546040519192506001600160a01b03808516929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380546001600160a01b0319166001600160a01b0392909216919091179055565b7ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a8780546001600160a01b039384166001600160a01b0319918216179091557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a868054929093169116179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6001600160a01b03811681146200022957600080fd5b50565b600080604083850312156200024057600080fd5b82516200024d8162000213565b6020840151909250620002608162000213565b809150509250929050565b6000602082840312156200027e57600080fd5b81516200028b8162000213565b9392505050565b610c3c80620002a26000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806309c5eabe146100515780638da5cb5b1461007a578063a8b2e348146100a7578063f2fde38b146100ba575b600080fd5b61006461005f366004610699565b6100cf565b604051610071919061074c565b60405180910390f35b6100826100f9565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610071565b6100646100b536600461085e565b61013e565b6100cd6100c83660046108fc565b61029d565b005b60606000828060200190518101906100e791906109c6565b90506100f28161013e565b9392505050565b60006101397f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b6000805460609133916101879073ffffffffffffffffffffffffffffffffffffffff167f9e0b856941fb70fc9b56c896d5f39a2079c3ed041dbc5e87efbf9c503b354b766103ce565b73ffffffffffffffffffffffffffffffffffffffff1663209652556040518163ffffffff1660e01b815260040160e060405180830381865afa1580156101d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f59190610a81565b9050806080015167ffffffffffffffff1684602001511115801561022b57508060a0015167ffffffffffffffff16846040015111155b610296576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f726164697573206f766572206c696d697400000000000000000000000000000060448201526064015b60405180910390fd5b5050919050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff16331461030d576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103168161051a565b50565b7ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a87805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a868054929093169116179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6040517ffbdfa1ea00000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff85169063fbdfa1ea90602401600060405180830381865afa15801561043e573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526104849190810190610b31565b905080516000036104f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6964206e6f742072656769737465726564000000000000000000000000000000604482015260640161028d565b6105128160008151811061050757610507610bd7565b602002602001015190565b949350505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804608054604051610316928492909173ffffffffffffffffffffffffffffffffffffffff8085169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715610621576106216105ce565b60405290565b6040805190810167ffffffffffffffff81118282101715610621576106216105ce565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610691576106916105ce565b604052919050565b600060208083850312156106ac57600080fd5b823567ffffffffffffffff808211156106c457600080fd5b818501915085601f8301126106d857600080fd5b8135818111156106ea576106ea6105ce565b61071a847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160161064a565b9150808252868482850101111561073057600080fd5b8084840185840137600090820190930192909252509392505050565b600060208083528351808285015260005b818110156107795785810183015185820160400152820161075d565b8181111561078b576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600082601f8301126107d057600080fd5b6107d8610627565b8060408401858111156107ea57600080fd5b845b818110156108045780358452602093840193016107ec565b509095945050505050565b600082601f83011261082057600080fd5b610828610627565b80608084018581111561083a57600080fd5b845b818110156108045761084e87826107bf565b845260209093019260400161083c565b60006101e0828403121561087157600080fd5b6108796105fd565b823581526020830135602082015260408301356040820152606083013560608201526108a884608085016107bf565b60808201526108ba8460c0850161080f565b60a08201526108cd8461014085016107bf565b60c082015261018083013560e08201526101a08301356101008201526101c09092013561012083015250919050565b60006020828403121561090e57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146100f257600080fd5b600082601f83011261094357600080fd5b61094b610627565b80604084018581111561095d57600080fd5b845b8181101561080457805184526020938401930161095f565b600082601f83011261098857600080fd5b610990610627565b8060808401858111156109a257600080fd5b845b81811015610804576109b68782610932565b84526020909301926040016109a4565b60006101e082840312156109d957600080fd5b6109e16105fd565b82518152602083015160208201526040830151604082015260608301516060820152610a108460808501610932565b6080820152610a228460c08501610977565b60a0820152610a35846101408501610932565b60c082015261018083015160e08201526101a08301516101008201526101c09092015161012083015250919050565b805167ffffffffffffffff81168114610a7c57600080fd5b919050565b600060e08284031215610a9357600080fd5b60405160e0810181811067ffffffffffffffff82111715610ab657610ab66105ce565b604052610ac283610a64565b8152610ad060208401610a64565b6020820152610ae160408401610a64565b6040820152610af260608401610a64565b6060820152610b0360808401610a64565b6080820152610b1460a08401610a64565b60a0820152610b2560c08401610a64565b60c08201529392505050565b60006020808385031215610b4457600080fd5b825167ffffffffffffffff80821115610b5c57600080fd5b818501915085601f830112610b7057600080fd5b815181811115610b8257610b826105ce565b8060051b9150610b9384830161064a565b8181529183018401918481019088841115610bad57600080fd5b938501935b83851015610bcb57845182529385019390850190610bb2565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220df8063e8f77f1c518dc4049488a1c488dd2a83f6c8878c2e70d37513c0a6fa1664736f6c634300080d0033";

type AttackChargeSystemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttackChargeSystemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AttackChargeSystem__factory extends ContractFactory {
  constructor(...args: AttackChargeSystemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AttackChargeSystem> {
    return super.deploy(
      _world,
      _components,
      overrides || {}
    ) as Promise<AttackChargeSystem>;
  }
  override getDeployTransaction(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_world, _components, overrides || {});
  }
  override attach(address: string): AttackChargeSystem {
    return super.attach(address) as AttackChargeSystem;
  }
  override connect(signer: Signer): AttackChargeSystem__factory {
    return super.connect(signer) as AttackChargeSystem__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttackChargeSystemInterface {
    return new utils.Interface(_abi) as AttackChargeSystemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AttackChargeSystem {
    return new Contract(address, _abi, signerOrProvider) as AttackChargeSystem;
  }
}
