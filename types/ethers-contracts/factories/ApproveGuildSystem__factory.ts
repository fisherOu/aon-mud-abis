/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  ApproveGuildSystem,
  ApproveGuildSystemInterface,
} from "../ApproveGuildSystem";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWorld",
        name: "_world",
        type: "address",
      },
      {
        internalType: "address",
        name: "_components",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Ownable__NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "Ownable__NotTransitiveOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "args",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "guildCrestId",
        type: "uint256",
      },
    ],
    name: "executeTyped",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620018713803806200187183398101604081905262000034916200022c565b818162000041336200010f565b6001600160a01b03811615620000585780620000bd565b816001600160a01b031663ba62fbe46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000097573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000bd91906200026b565b600080546001600160a01b03199081166001600160a01b0393841690811790925560018054909116928516928317905562000105919062000183602090811b6200070717901c565b5050505062000292565b600062000126620001ef60201b620007981760201c565b80546040519192506001600160a01b03808516929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380546001600160a01b0319166001600160a01b0392909216919091179055565b7ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a8780546001600160a01b039384166001600160a01b0319918216179091557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a868054929093169116179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6001600160a01b03811681146200022957600080fd5b50565b600080604083850312156200024057600080fd5b82516200024d8162000213565b6020840151909250620002608162000213565b809150509250929050565b6000602082840312156200027e57600080fd5b81516200028b8162000213565b9392505050565b6115cf80620002a26000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806309c5eabe146100515780633e991df31461007a5780638da5cb5b1461008d578063f2fde38b146100ba575b600080fd5b61006461005f366004611035565b6100cf565b604051610071919061112b565b60405180910390f35b61006461008836600461113e565b6100f9565b610095610646565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610071565b6100cd6100c8366004611157565b61068b565b005b60606000828060200190518101906100e7919061118d565b90506100f2816100f9565b9392505050565b6000805460609133916101429073ffffffffffffffffffffffffffffffffffffffff167fde95e8412e4c1b59c183267e54d1bef716ab450b30c57bb7c5c88a38771301ab6107bc565b6040517fcccf7a8e0000000000000000000000000000000000000000000000000000000081526004810186905290915073ffffffffffffffffffffffffffffffffffffffff82169063cccf7a8e90602401602060405180830381865afa1580156101b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d491906111a6565b61023f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f637265737420696e76616c69640000000000000000000000000000000000000060448201526064015b60405180910390fd5b600080546102839073ffffffffffffffffffffffffffffffffffffffff167f1eda1d28f6db5e8d259ef45f3ba538b7df923e0105b5098809b1ebfe9dd4983f6107bc565b6040517f0ff4c9160000000000000000000000000000000000000000000000000000000081526004810187905290915060009073ffffffffffffffffffffffffffffffffffffffff831690630ff4c91690602401602060405180830381865afa1580156102f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610318919061118d565b905061032381610908565b600080546103679073ffffffffffffffffffffffffffffffffffffffff167ff899011875ecdd0cff874cbbf66c1a2682791e10ae993d0a0ef3d2530849a7de6107bc565b73ffffffffffffffffffffffffffffffffffffffff1663209652556040518163ffffffff1660e01b8152600401600060405180830381865afa1580156103b1573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526103f79190810190611226565b9050610407828260400151610cfd565b6040805160a0810182526001815260808084015160208301526000828401819052606083015267ffffffffffffffff42169082015290517fa829044000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169163a82904409161048d918b91600401611350565b600060405180830381600087803b1580156104a757600080fd5b505af11580156104bb573d6000803e3d6000fd5b5050600054610503925073ffffffffffffffffffffffffffffffffffffffff1690507f1eda1d28f6db5e8d259ef45f3ba538b7df923e0105b5098809b1ebfe9dd4983f6107bc565b73ffffffffffffffffffffffffffffffffffffffff16634cc82215886040518263ffffffff1660e01b815260040161053d91815260200190565b600060405180830381600087803b15801561055757600080fd5b505af115801561056b573d6000803e3d6000fd5b50506000546105b3925073ffffffffffffffffffffffffffffffffffffffff1690507f1eda1d28f6db5e8d259ef45f3ba538b7df923e0105b5098809b1ebfe9dd4983f6107bc565b6040517f1ab06ee5000000000000000000000000000000000000000000000000000000008152600481018990526024810184905273ffffffffffffffffffffffffffffffffffffffff9190911690631ab06ee590604401600060405180830381600087803b15801561062457600080fd5b505af1158015610638573d6000803e3d6000fd5b505050505050505050919050565b60006106867f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff1633146106fb576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61070481610e70565b50565b7ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a87805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a868054929093169116179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6040517ffbdfa1ea00000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff85169063fbdfa1ea90602401600060405180830381865afa15801561082c573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261087291908101906113b7565b905080516000036108df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6964206e6f7420726567697374657265640000000000000000000000000000006044820152606401610236565b610900816000815181106108f5576108f561145d565b602002602001015190565b949350505050565b6000805433919061094f9073ffffffffffffffffffffffffffffffffffffffff167fd9a058a8db06aec9057108bd96cfe2e7f580ccef7b81e22c7f33b2889597c1f26107bc565b60008054919250906109979073ffffffffffffffffffffffffffffffffffffffff167f53c6c48404020c13382f2b1b9b291c13f7e76aa44e5c76f2f9384b8aa97bfbe06107bc565b60008054919250906109df9073ffffffffffffffffffffffffffffffffffffffff167fde95e8412e4c1b59c183267e54d1bef716ab450b30c57bb7c5c88a38771301ab6107bc565b6040517ffbdfa1ea0000000000000000000000000000000000000000000000000000000081526004810186905290915060009073ffffffffffffffffffffffffffffffffffffffff85169063fbdfa1ea90602401600060405180830381865afa158015610a50573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a9691908101906113b7565b90506000805b8251811015610c8c57878573ffffffffffffffffffffffffffffffffffffffff16630ff4c916858481518110610ad457610ad461145d565b60200260200101516040518263ffffffff1660e01b8152600401610afa91815260200190565b602060405180830381865afa158015610b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3b919061118d565b03610c7a5760008473ffffffffffffffffffffffffffffffffffffffff16630ff4c916858481518110610b7057610b7061145d565b60200260200101516040518263ffffffff1660e01b8152600401610b9691815260200190565b600060405180830381865afa158015610bb3573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610bf9919081019061148c565b90506002816000015163ffffffff161015610c70576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f686173206e6f20617574686f72697479000000000000000000000000000000006044820152606401610236565b6001925050610c8c565b80610c848161153a565b915050610a9c565b5080610cf4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6f70657261746f72206e6f7420696e206775696c6400000000000000000000006044820152606401610236565b50505050505050565b60008054610d419073ffffffffffffffffffffffffffffffffffffffff167f53c6c48404020c13382f2b1b9b291c13f7e76aa44e5c76f2f9384b8aa97bfbe06107bc565b6040517ffbdfa1ea0000000000000000000000000000000000000000000000000000000081526004810185905290915060009073ffffffffffffffffffffffffffffffffffffffff83169063fbdfa1ea90602401600060405180830381865afa158015610db2573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610df891908101906113b7565b90508263ffffffff16815110610e6a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6c61636b206f6620706f736974696f6e730000000000000000000000000000006044820152606401610236565b50505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804608054604051610704928492909173ffffffffffffffffffffffffffffffffffffffff8085169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715610f7757610f77610f24565b60405290565b60405160a0810167ffffffffffffffff81118282101715610f7757610f77610f24565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610fe757610fe7610f24565b604052919050565b600067ffffffffffffffff82111561100957611009610f24565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60006020828403121561104757600080fd5b813567ffffffffffffffff81111561105e57600080fd5b8201601f8101841361106f57600080fd5b803561108261107d82610fef565b610fa0565b81815285602083850101111561109757600080fd5b81602084016020830137600091810160200191909152949350505050565b60005b838110156110d05781810151838201526020016110b8565b83811115610e6a5750506000910152565b600081518084526110f98160208601602086016110b5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006100f260208301846110e1565b60006020828403121561115057600080fd5b5035919050565b60006020828403121561116957600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146100f257600080fd5b60006020828403121561119f57600080fd5b5051919050565b6000602082840312156111b857600080fd5b815180151581146100f257600080fd5b805163ffffffff811681146111dc57600080fd5b919050565b600082601f8301126111f257600080fd5b815161120061107d82610fef565b81815284602083860101111561121557600080fd5b6109008260208301602087016110b5565b60006020828403121561123857600080fd5b815167ffffffffffffffff8082111561125057600080fd5b90830190610100828603121561126557600080fd5b61126d610f53565b8251815261127d602084016111c8565b602082015261128e604084016111c8565b60408201526060830151828111156112a557600080fd5b6112b1878286016111e1565b6060830152506080830151828111156112c957600080fd5b6112d5878286016111e1565b60808301525060a0830151828111156112ed57600080fd5b6112f9878286016111e1565b60a08301525060c08301518281111561131157600080fd5b61131d878286016111e1565b60c08301525060e08301518281111561133557600080fd5b611341878286016111e1565b60e08301525095945050505050565b8281526040602082015263ffffffff82511660408201526000602083015160a0606084015261138260e08401826110e1565b905060408401516080840152606084015160a084015267ffffffffffffffff60808501511660c0840152809150509392505050565b600060208083850312156113ca57600080fd5b825167ffffffffffffffff808211156113e257600080fd5b818501915085601f8301126113f657600080fd5b81518181111561140857611408610f24565b8060051b9150611419848301610fa0565b818152918301840191848101908884111561143357600080fd5b938501935b8385101561145157845182529385019390850190611438565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561149e57600080fd5b815167ffffffffffffffff808211156114b657600080fd5b9083019060a082860312156114ca57600080fd5b6114d2610f7d565b6114db836111c8565b81526020830151828111156114ef57600080fd5b6114fb878286016111e1565b602083015250604083015160408201526060830151606082015260808301519250818316831461152a57600080fd5b6080810192909252509392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611592577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea2646970667358221220ec3f8ca50db2196e515b71442447553764132b8704ea3cada6b2201d59d6e2a564736f6c634300080d0033";

type ApproveGuildSystemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ApproveGuildSystemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ApproveGuildSystem__factory extends ContractFactory {
  constructor(...args: ApproveGuildSystemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ApproveGuildSystem> {
    return super.deploy(
      _world,
      _components,
      overrides || {}
    ) as Promise<ApproveGuildSystem>;
  }
  override getDeployTransaction(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_world, _components, overrides || {});
  }
  override attach(address: string): ApproveGuildSystem {
    return super.attach(address) as ApproveGuildSystem;
  }
  override connect(signer: Signer): ApproveGuildSystem__factory {
    return super.connect(signer) as ApproveGuildSystem__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ApproveGuildSystemInterface {
    return new utils.Interface(_abi) as ApproveGuildSystemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ApproveGuildSystem {
    return new Contract(address, _abi, signerOrProvider) as ApproveGuildSystem;
  }
}
