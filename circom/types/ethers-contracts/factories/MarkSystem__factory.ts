/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { MarkSystem, MarkSystemInterface } from "../MarkSystem";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWorld",
        name: "_world",
        type: "address",
      },
      {
        internalType: "address",
        name: "_components",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Ownable__NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "Ownable__NotTransitiveOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "args",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "coordHash",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "width",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "height",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "realHash",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "distance",
            type: "uint256",
          },
          {
            internalType: "uint256[2]",
            name: "a",
            type: "uint256[2]",
          },
          {
            internalType: "uint256[2][2]",
            name: "b",
            type: "uint256[2][2]",
          },
          {
            internalType: "uint256[2]",
            name: "c",
            type: "uint256[2]",
          },
          {
            internalType: "uint256",
            name: "seed",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isUnlimited",
            type: "bool",
          },
        ],
        internalType: "struct MarkInfo",
        name: "markInfo",
        type: "tuple",
      },
    ],
    name: "executeTyped",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620015a3380380620015a383398101604081905262000034916200022c565b818162000041336200010f565b6001600160a01b03811615620000585780620000bd565b816001600160a01b031663ba62fbe46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000097573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000bd91906200026b565b600080546001600160a01b03199081166001600160a01b0393841690811790925560018054909116928516928317905562000105919062000183602090811b6200076517901c565b5050505062000292565b600062000126620001ef60201b620007f61760201c565b80546040519192506001600160a01b03808516929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380546001600160a01b0319166001600160a01b0392909216919091179055565b7ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a8780546001600160a01b039384166001600160a01b0319918216179091557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a868054929093169116179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6001600160a01b03811681146200022957600080fd5b50565b600080604083850312156200024057600080fd5b82516200024d8162000213565b6020840151909250620002608162000213565b809150509250929050565b6000602082840312156200027e57600080fd5b81516200028b8162000213565b9392505050565b61130180620002a26000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806309c5eabe146100515780638d8baf2a1461007a5780638da5cb5b1461008d578063f2fde38b146100ba575b600080fd5b61006461005f366004610ae5565b6100cf565b6040516100719190610b98565b60405180910390f35b610064610088366004610cc8565b6100f9565b6100956106a4565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610071565b6100cd6100c8366004610d8e565b6106e9565b005b60606000828060200190518101906100e79190610e4a565b90506100f2816100f9565b9392505050565b60008054606091906101419073ffffffffffffffffffffffffffffffffffffffff167fd0deb8af54f5692432398f7f62bf53c9e54e6d6a9b4dbccb012b3fe04ea432d361081a565b73ffffffffffffffffffffffffffffffffffffffff1663209652556040518163ffffffff1660e01b815260040161010060405180830381865afa15801561018c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b09190610eec565b8051909150156102f65760006040518060a001604052808560600151815260200185600001518152602001856080015181526020018560200151815260200185604001518152509050816060015173ffffffffffffffffffffffffffffffffffffffff166334baeab98560a001518660c001518760e00151856040518563ffffffff1660e01b81526004016102489493929190610fdf565b602060405180830381865afa158015610265573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102899190611063565b6102f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4661696c6564206d61726b2070726f6f6620636865636b00000000000000000060448201526064015b60405180910390fd5b505b6000805461033a9073ffffffffffffffffffffffffffffffffffffffff167f9e0b856941fb70fc9b56c896d5f39a2079c3ed041dbc5e87efbf9c503b354b7661081a565b73ffffffffffffffffffffffffffffffffffffffff1663209652556040518163ffffffff1660e01b815260040160e060405180830381865afa158015610384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a89190611098565b9050806080015167ffffffffffffffff168460200151111580156103de57508060a0015167ffffffffffffffff16846040015111155b610444576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f726164697573206f766572206c696d697400000000000000000000000000000060448201526064016102eb565b600080546104889073ffffffffffffffffffffffffffffffffffffffff167f7b6e1afc104b7e498d92a5202135a932fbd13a556799eb8b3b435da6f581acca61081a565b73ffffffffffffffffffffffffffffffffffffffff1663209652556040518163ffffffff1660e01b81526004016040805180830381865afa1580156104d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f59190611148565b9050806020015167ffffffffffffffff1685608001511115610573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6d61726b20746f6f20666172000000000000000000000000000000000000000060448201526064016102eb565b6000546105b69073ffffffffffffffffffffffffffffffffffffffff167f4b1ac4c3aa37732e927cbff52c019e9fbdad0f3e454031afaefd319a3dc66ce461081a565b73ffffffffffffffffffffffffffffffffffffffff1663663579388660600151604051806060016040528089610100015181526020018560000151426105fc91906111a3565b67ffffffffffffffff90811682526101208b01511515602092830152604080517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815260048101959095528351602486015291830151166044840152015115156064820152608401600060405180830381600087803b15801561068457600080fd5b505af1158015610698573d6000803e3d6000fd5b50505050505050919050565b60006106e47f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff163314610759576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61076281610966565b50565b7ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a87805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a868054929093169116179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6040517ffbdfa1ea00000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff85169063fbdfa1ea90602401600060405180830381865afa15801561088a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526108d091908101906111f6565b9050805160000361093d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6964206e6f74207265676973746572656400000000000000000000000000000060448201526064016102eb565b61095e816000815181106109535761095361129c565b602002602001015190565b949350505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804608054604051610762928492909173ffffffffffffffffffffffffffffffffffffffff8085169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715610a6d57610a6d610a1a565b60405290565b6040805190810167ffffffffffffffff81118282101715610a6d57610a6d610a1a565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610add57610add610a1a565b604052919050565b60006020808385031215610af857600080fd5b823567ffffffffffffffff80821115610b1057600080fd5b818501915085601f830112610b2457600080fd5b813581811115610b3657610b36610a1a565b610b66847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610a96565b91508082528684828501011115610b7c57600080fd5b8084840185840137600090820190930192909252509392505050565b600060208083528351808285015260005b81811015610bc557858101830151858201604001528201610ba9565b81811115610bd7576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600082601f830112610c1c57600080fd5b610c24610a73565b806040840185811115610c3657600080fd5b845b81811015610c50578035845260209384019301610c38565b509095945050505050565b600082601f830112610c6c57600080fd5b610c74610a73565b806080840185811115610c8657600080fd5b845b81811015610c5057610c9a8782610c0b565b8452602090930192604001610c88565b801515811461076257600080fd5b8035610cc381610caa565b919050565b60006101e08284031215610cdb57600080fd5b610ce3610a49565b8235815260208301356020820152604083013560408201526060830135606082015260808301356080820152610d1c8460a08501610c0b565b60a0820152610d2e8460e08501610c5b565b60c0820152610d41846101608501610c0b565b60e08201526101a0830135610100820152610d5f6101c08401610cb8565b6101208201529392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461076257600080fd5b600060208284031215610da057600080fd5b81356100f281610d6c565b600082601f830112610dbc57600080fd5b610dc4610a73565b806040840185811115610dd657600080fd5b845b81811015610c50578051845260209384019301610dd8565b600082601f830112610e0157600080fd5b610e09610a73565b806080840185811115610e1b57600080fd5b845b81811015610c5057610e2f8782610dab565b8452602090930192604001610e1d565b8051610cc381610caa565b60006101e08284031215610e5d57600080fd5b610e65610a49565b8251815260208301516020820152604083015160408201526060830151606082015260808301516080820152610e9e8460a08501610dab565b60a0820152610eb08460e08501610df0565b60c0820152610ec3846101608501610dab565b60e08201526101a0830151610100820152610d5f6101c08401610e3f565b8051610cc381610d6c565b6000610100808385031215610f0057600080fd5b6040519081019067ffffffffffffffff82118183101715610f2357610f23610a1a565b8160405283519150610f3482610caa565b818152610f4360208501610ee1565b6020820152610f5460408501610ee1565b6040820152610f6560608501610ee1565b6060820152610f7660808501610ee1565b6080820152610f8760a08501610ee1565b60a0820152610f9860c08501610ee1565b60c0820152610fa960e08501610ee1565b60e0820152949350505050565b8060005b6002811015610fd9578151845260209384019390910190600101610fba565b50505050565b6101a08101610fee8287610fb6565b60408083018660005b600281101561101e5761100b838351610fb6565b9183019160209190910190600101610ff7565b5050505061102f60c0830185610fb6565b61010082018360005b6005811015611057578151835260209283019290910190600101611038565b50505095945050505050565b60006020828403121561107557600080fd5b81516100f281610caa565b805167ffffffffffffffff81168114610cc357600080fd5b600060e082840312156110aa57600080fd5b60405160e0810181811067ffffffffffffffff821117156110cd576110cd610a1a565b6040526110d983611080565b81526110e760208401611080565b60208201526110f860408401611080565b604082015261110960608401611080565b606082015261111a60808401611080565b608082015261112b60a08401611080565b60a082015261113c60c08401611080565b60c08201529392505050565b60006040828403121561115a57600080fd5b6040516040810181811067ffffffffffffffff8211171561117d5761117d610a1a565b60405261118983611080565b815261119760208401611080565b60208201529392505050565b600067ffffffffffffffff8083168185168083038211156111ed577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b01949350505050565b6000602080838503121561120957600080fd5b825167ffffffffffffffff8082111561122157600080fd5b818501915085601f83011261123557600080fd5b81518181111561124757611247610a1a565b8060051b9150611258848301610a96565b818152918301840191848101908884111561127257600080fd5b938501935b8385101561129057845182529385019390850190611277565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220c9b123185336cf5f70ecef56b276a893e9694ffc74303bfdc1383035baf9b8ab64736f6c634300080d0033";

type MarkSystemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MarkSystemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MarkSystem__factory extends ContractFactory {
  constructor(...args: MarkSystemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MarkSystem> {
    return super.deploy(
      _world,
      _components,
      overrides || {}
    ) as Promise<MarkSystem>;
  }
  override getDeployTransaction(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_world, _components, overrides || {});
  }
  override attach(address: string): MarkSystem {
    return super.attach(address) as MarkSystem;
  }
  override connect(signer: Signer): MarkSystem__factory {
    return super.connect(signer) as MarkSystem__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MarkSystemInterface {
    return new utils.Interface(_abi) as MarkSystemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MarkSystem {
    return new Contract(address, _abi, signerOrProvider) as MarkSystem;
  }
}
